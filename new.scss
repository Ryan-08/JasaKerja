// Contents
//
// Navbar
// Navbar brand
// Navbar nav
// Navbar text
// Navbar divider
// Responsive navbar
// Navbar position
// Navbar themes


// Navbar
//
// Provide a static navbar from which we expand to create full-width, fixed, and
// other navbar variations.

.navbar {
    position: relative;
    display: flex;
    flex-wrap: wrap; // allow us to do the line break for collapsing content
    align-items: center;
    justify-content: space-between; // space out brand from logo
    padding: $navbar-padding-y $navbar-padding-x;
  
    // Because flex properties aren't inherited, we need to redeclare these first
    // few properties so that content nested within behave properly.
    %container-flex-properties {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: space-between;
    }
  
    .container,
    .container-fluid {
      @extend %container-flex-properties;
    }
  
    @each $breakpoint, $container-max-width in $container-max-widths {
      > .container#{breakpoint-infix($breakpoint, $container-max-widths)} {
        @extend %container-flex-properties;
      }
    }
  }
  
  
  // Navbar brand
  //
  // Used for brand, project, or site names.
  
  .navbar-brand {
    display: inline-block;
    padding-top: $navbar-brand-padding-y;
    padding-bottom: $navbar-brand-padding-y;
    margin-right: $navbar-padding-x;
    @include font-size($navbar-brand-font-size);
    line-height: inherit;
    white-space: nowrap;
  
    @include hover-focus() {
      text-decoration: none;
    }
  }
  
  
  // Navbar nav
  //
  // Custom navbar navigation (doesn't require `.nav`, but does make use of `.nav-link`).
  
  .navbar-nav {
    display: flex;
    flex-direction: column; // cannot use `inherit` to get the `.navbar`s value
    padding-left: 0;
    margin-bottom: 0;
    list-style: none;
  
    .nav-link {
      padding-right: 0;
      padding-left: 0;
    }
  
    .dropdown-menu {
      position: static;
      float: none;
    }
  }
  
  
  // Navbar text
  //
  //
  
  .navbar-text {
    display: inline-block;
    padding-top: $nav-link-padding-y;
    padding-bottom: $nav-link-padding-y;
  }
  
  
  // Responsive navbar
  //
  // Custom styles for responsive collapsing and toggling of navbar contents.
  // Powered by the collapse Bootstrap JavaScript plugin.
  
  // When collapsed, prevent the toggleable navbar contents from appearing in
  // the default flexbox row orientation. Requires the use of `flex-wrap: wrap`
  // on the `.navbar` parent.
  .navbar-collapse {
    flex-basis: 100%;
    flex-grow: 1;
    // For always expanded or extra full navbars, ensure content aligns itself
    // properly vertically. Can be easily overridden with flex utilities.
    align-items: center;
  }
  
  // Button for toggling the navbar when in its collapsed state
  .navbar-toggler {
    padding: $navbar-toggler-padding-y $navbar-toggler-padding-x;
    @include font-size($navbar-toggler-font-size);
    line-height: 1;
    background-color: transparent; // remove default button style
    border: $border-width solid transparent; // remove default button style
    @include border-radius($navbar-toggler-border-radius);
  
    @include hover-focus() {
      text-decoration: none;
    }
  }
  
  // Keep as a separate element so folks can easily override it with another icon
  // or image file as needed.
  .navbar-toggler-icon {
    display: inline-block;
    width: 1.5em;
    height: 1.5em;
    vertical-align: middle;
    content: "";
    background: no-repeat center center;
    background-size: 100% 100%;
  }
  
  // Generate series of `.navbar-expand-*` responsive classes for configuring
  // where your navbar collapses.
  .navbar-expand {
    @each $breakpoint in map-keys($grid-breakpoints) {
      $next: breakpoint-next($breakpoint, $grid-breakpoints);
      $infix: breakpoint-infix($next, $grid-breakpoints);
  
      &#{$infix} {
        @include media-breakpoint-down($breakpoint) {
          %container-navbar-expand-#{$breakpoint} {
            padding-right: 0;
            padding-left: 0;
          }
  
          > .container,
          > .container-fluid {
            @extend %container-navbar-expand-#{$breakpoint};
          }
  
          @each $size, $container-max-width in $container-max-widths {
            > .container#{breakpoint-infix($size, $container-max-widths)} {
              @extend %container-navbar-expand-#{$breakpoint};
            }
          }
        }
  
        @include media-breakpoint-up($next) {
          flex-flow: row nowrap;
          justify-content: flex-start;
  
          .navbar-nav {
            flex-direction: row;
  
            .dropdown-menu {
              position: absolute;
            }
  
            .nav-link {
              padding-right: $navbar-nav-link-padding-x;
              padding-left: $navbar-nav-link-padding-x;
            }
          }
  
          // For nesting containers, have to redeclare for alignment purposes
          %container-nesting-#{$breakpoint} {
            flex-wrap: nowrap;
          }
  
          > .container,
          > .container-fluid {
            @extend %container-nesting-#{$breakpoint};
          }
  
          @each $size, $container-max-width in $container-max-widths {
            > .container#{breakpoint-infix($size, $container-max-widths)} {
              @extend %container-nesting-#{$breakpoint};
            }
          }
  
          .navbar-collapse {
            display: flex !important; // stylelint-disable-line declaration-no-important
  
            // Changes flex-bases to auto because of an IE10 bug
            flex-basis: auto;
          }
  
          .navbar-toggler {
            display: none;
          }
        }
      }
    }
  }
  
  
  // Navbar themes
  //
  // Styles for switching between navbars with light or dark background.
  
  // Dark links against a light background
  .navbar-light {
    .navbar-brand {
      color: $navbar-light-brand-color;
  
      @include hover-focus() {
        color: $navbar-light-brand-hover-color;
      }
    }
  
    .navbar-nav {
      .nav-link {
        color: $navbar-light-color;
  
        @include hover-focus() {
          color: $navbar-light-hover-color;
        }
  
        &.disabled {
          color: $navbar-light-disabled-color;
        }
      }
  
      .show > .nav-link,
      .active > .nav-link,
      .nav-link.show,
      .nav-link.active {
        color: $navbar-light-active-color;
      }
    }
  
    .navbar-toggler {
      color: $navbar-light-color;
      border-color: $navbar-light-toggler-border-color;
    }
  
    .navbar-toggler-icon {
      background-image: escape-svg($navbar-light-toggler-icon-bg);
    }
  
    .navbar-text {
      color: $navbar-light-color;
      a {
        color: $navbar-light-active-color;
  
        @include hover-focus() {
          color: $navbar-light-active-color;
        }
      }
    }
  }
  
  // White links against a dark background
  .navbar-dark {
    .navbar-brand {
      color: $navbar-dark-brand-color;
  
      @include hover-focus() {
        color: $navbar-dark-brand-hover-color;
      }
    }
  
    .navbar-nav {
      .nav-link {
        color: $navbar-dark-color;
  
        @include hover-focus() {
          color: $navbar-dark-hover-color;
        }
  
        &.disabled {
          color: $navbar-dark-disabled-color;
        }
      }
  
      .show > .nav-link,
      .active > .nav-link,
      .nav-link.show,
      .nav-link.active {
        color: $navbar-dark-active-color;
      }
    }
  
    .navbar-toggler {
      color: $navbar-dark-color;
      border-color: $navbar-dark-toggler-border-color;
    }
  
    .navbar-toggler-icon {
      background-image: escape-svg($navbar-dark-toggler-icon-bg);
    }
  
    .navbar-text {
      color: $navbar-dark-color;
      a {
        color: $navbar-dark-active-color;
  
        @include hover-focus() {
          color: $navbar-dark-active-color;
        }
      }
    }
  }
  
  //
// Base styles
//

.alert {
    position: relative;
    padding: $alert-padding-y $alert-padding-x;
    margin-bottom: $alert-margin-bottom;
    border: $alert-border-width solid transparent;
    @include border-radius($alert-border-radius);
  }
  
  // Headings for larger alerts
  .alert-heading {
    // Specified to prevent conflicts of changing $headings-color
    color: inherit;
  }
  
  // Provide class for links that match alerts
  .alert-link {
    font-weight: $alert-link-font-weight;
  }
  
  
  // Dismissible alerts
  //
  // Expand the right padding and account for the close button's positioning.
  
  .alert-dismissible {
    padding-right: $close-font-size + $alert-padding-x * 2;
  
    // Adjust close link position
    .close {
      position: absolute;
      top: 0;
      right: 0;
      padding: $alert-padding-y $alert-padding-x;
      color: inherit;
    }
  }
  
  
  // Alternate styles
  //
  // Generate contextual modifier classes for colorizing the alert.
  
  @each $color, $value in $theme-colors {
    .alert-#{$color} {
      @include alert-variant(theme-color-level($color, $alert-bg-level), theme-color-level($color, $alert-border-level), theme-color-level($color, $alert-color-level));
    }
  }

  // Base class
//
// Requires one of the contextual, color modifier classes for `color` and
// `background-color`.

.badge {
    display: inline-block;
    padding: $badge-padding-y $badge-padding-x;
    @include font-size($badge-font-size);
    font-weight: $badge-font-weight;
    line-height: 1;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    @include border-radius($badge-border-radius);
    @include transition($badge-transition);
  
    @at-root a#{&} {
      @include hover-focus() {
        text-decoration: none;
      }
    }
  
    // Empty badges collapse automatically
    &:empty {
      display: none;
    }
  }
  
  // Quick fix for badges in buttons
  .btn .badge {
    position: relative;
    top: -1px;
  }
  
  // Pill badges
  //
  // Make them extra rounded with a modifier to replace v3's badges.
  
  .badge-pill {
    padding-right: $badge-pill-padding-x;
    padding-left: $badge-pill-padding-x;
    @include border-radius($badge-pill-border-radius);
  }
  
  // Colors
  //
  // Contextual variations (linked badges get darker on :hover).
  
  @each $color, $value in $theme-colors {
    .badge-#{$color} {
      @include badge-variant($value);
    }
  }
  .breadcrumb {
    display: flex;
    flex-wrap: wrap;
    padding: $breadcrumb-padding-y $breadcrumb-padding-x;
    margin-bottom: $breadcrumb-margin-bottom;
    @include font-size($breadcrumb-font-size);
    list-style: none;
    background-color: $breadcrumb-bg;
    @include border-radius($breadcrumb-border-radius);
  }
  
  .breadcrumb-item {
    // The separator between breadcrumbs (by default, a forward-slash: "/")
    + .breadcrumb-item {
      padding-left: $breadcrumb-item-padding;
  
      &::before {
        display: inline-block; // Suppress underlining of the separator in modern browsers
        padding-right: $breadcrumb-item-padding;
        color: $breadcrumb-divider-color;
        content: escape-svg($breadcrumb-divider);
      }
    }
  
    // IE9-11 hack to properly handle hyperlink underlines for breadcrumbs built
    // without `<ul>`s. The `::before` pseudo-element generates an element
    // *within* the .breadcrumb-item and thereby inherits the `text-decoration`.
    //
    // To trick IE into suppressing the underline, we give the pseudo-element an
    // underline and then immediately remove it.
    + .breadcrumb-item:hover::before {
      text-decoration: underline;
    }
    // stylelint-disable-next-line no-duplicate-selectors
    + .breadcrumb-item:hover::before {
      text-decoration: none;
    }
  
    &.active {
      color: $breadcrumb-active-color;
    }
  }
// stylelint-disable selector-no-qualifying-type

// Make the div behave like a button
.btn-group,
.btn-group-vertical {
  position: relative;
  display: inline-flex;
  vertical-align: middle; // match .btn alignment given font-size hack above

  > .btn {
    position: relative;
    flex: 1 1 auto;

    // Bring the hover, focused, and "active" buttons to the front to overlay
    // the borders properly
    @include hover() {
      z-index: 1;
    }
    &:focus,
    &:active,
    &.active {
      z-index: 1;
    }
  }
}

// Optional: Group multiple button groups together for a toolbar
.btn-toolbar {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;

  .input-group {
    width: auto;
  }
}

.btn-group {
  // Prevent double borders when buttons are next to each other
  > .btn:not(:first-child),
  > .btn-group:not(:first-child) {
    margin-left: -$btn-border-width;
  }

  // Reset rounded corners
  > .btn:not(:last-child):not(.dropdown-toggle),
  > .btn-group:not(:last-child) > .btn {
    @include border-right-radius(0);
  }

  > .btn:not(:first-child),
  > .btn-group:not(:first-child) > .btn {
    @include border-left-radius(0);
  }
}

// Sizing
//
// Remix the default button sizing classes into new ones for easier manipulation.

.btn-group-sm > .btn { @extend .btn-sm; }
.btn-group-lg > .btn { @extend .btn-lg; }


//
// Split button dropdowns
//

.dropdown-toggle-split {
  padding-right: $btn-padding-x * .75;
  padding-left: $btn-padding-x * .75;

  &::after,
  .dropup &::after,
  .dropright &::after {
    margin-left: 0;
  }

  .dropleft &::before {
    margin-right: 0;
  }
}

.btn-sm + .dropdown-toggle-split {
  padding-right: $btn-padding-x-sm * .75;
  padding-left: $btn-padding-x-sm * .75;
}

.btn-lg + .dropdown-toggle-split {
  padding-right: $btn-padding-x-lg * .75;
  padding-left: $btn-padding-x-lg * .75;
}


// The clickable button for toggling the menu
// Set the same inset shadow as the :active state
.btn-group.show .dropdown-toggle {
  @include box-shadow($btn-active-box-shadow);

  // Show no shadow for `.btn-link` since it has no other button styles.
  &.btn-link {
    @include box-shadow(none);
  }
}


//
// Vertical button groups
//

.btn-group-vertical {
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;

  > .btn,
  > .btn-group {
    width: 100%;
  }

  > .btn:not(:first-child),
  > .btn-group:not(:first-child) {
    margin-top: -$btn-border-width;
  }

  // Reset rounded corners
  > .btn:not(:last-child):not(.dropdown-toggle),
  > .btn-group:not(:last-child) > .btn {
    @include border-bottom-radius(0);
  }

  > .btn:not(:first-child),
  > .btn-group:not(:first-child) > .btn {
    @include border-top-radius(0);
  }
}


// Checkbox and radio options
//
// In order to support the browser's form validation feedback, powered by the
// `required` attribute, we have to "hide" the inputs via `clip`. We cannot use
// `display: none;` or `visibility: hidden;` as that also hides the popover.
// Simply visually hiding the inputs via `opacity` would leave them clickable in
// certain cases which is prevented by using `clip` and `pointer-events`.
// This way, we ensure a DOM element is visible to position the popover from.
//
// See https://github.com/twbs/bootstrap/pull/12794 and
// https://github.com/twbs/bootstrap/pull/14559 for more information.

.btn-group-toggle {
  > .btn,
  > .btn-group > .btn {
    margin-bottom: 0; // Override default `<label>` value

    input[type="radio"],
    input[type="checkbox"] {
      position: absolute;
      clip: rect(0, 0, 0, 0);
      pointer-events: none;
    }
  }
}
// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.btn {
    display: inline-block;
    font-family: $btn-font-family;
    font-weight: $btn-font-weight;
    color: $body-color;
    text-align: center;
    white-space: $btn-white-space;
    vertical-align: middle;
    cursor: if($enable-pointer-cursor-for-buttons, pointer, null);
    user-select: none;
    background-color: transparent;
    border: $btn-border-width solid transparent;
    @include button-size($btn-padding-y, $btn-padding-x, $btn-font-size, $btn-line-height, $btn-border-radius);
    @include transition($btn-transition);
  
    @include hover() {
      color: $body-color;
      text-decoration: none;
    }
  
    &:focus,
    &.focus {
      outline: 0;
      box-shadow: $btn-focus-box-shadow;
    }
  
    // Disabled comes first so active can properly restyle
    &.disabled,
    &:disabled {
      opacity: $btn-disabled-opacity;
      @include box-shadow(none);
    }
  
    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active {
      @include box-shadow($btn-active-box-shadow);
  
      &:focus {
        @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
      }
    }
  }
  
  // Future-proof disabling of clicks on `<a>` elements
  a.btn.disabled,
  fieldset:disabled a.btn {
    pointer-events: none;
  }
  
  
  //
  // Alternate buttons
  //
  
  @each $color, $value in $theme-colors {
    .btn-#{$color} {
      @include button-variant($value, $value);
    }
  }
  
  @each $color, $value in $theme-colors {
    .btn-outline-#{$color} {
      @include button-outline-variant($value);
    }
  }
  
  
  //
  // Link buttons
  //
  
  // Make a button look and behave like a link
  .btn-link {
    font-weight: $font-weight-normal;
    color: $link-color;
    text-decoration: $link-decoration;
  
    @include hover() {
      color: $link-hover-color;
      text-decoration: $link-hover-decoration;
    }
  
    &:focus,
    &.focus {
      text-decoration: $link-hover-decoration;
      box-shadow: none;
    }
  
    &:disabled,
    &.disabled {
      color: $btn-link-disabled-color;
      pointer-events: none;
    }
  
    // No need for an active state here
  }
  
  
  //
  // Button Sizes
  //
  
  .btn-lg {
    @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-line-height-lg, $btn-border-radius-lg);
  }
  
  .btn-sm {
    @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-line-height-sm, $btn-border-radius-sm);
  }
  
  
  //
  // Block button
  //
  
  .btn-block {
    display: block;
    width: 100%;
  
    // Vertically space out multiple block buttons
    + .btn-block {
      margin-top: $btn-block-spacing-y;
    }
  }
  
  // Specificity overrides
  input[type="submit"],
  input[type="reset"],
  input[type="button"] {
    &.btn-block {
      width: 100%;
    }
  }
//
// Base styles
//

.card {
    position: relative;
    display: flex;
    flex-direction: column;
    min-width: 0; // See https://github.com/twbs/bootstrap/pull/22740#issuecomment-305868106
    height: $card-height;
    word-wrap: break-word;
    background-color: $card-bg;
    background-clip: border-box;
    border: $card-border-width solid $card-border-color;
    @include border-radius($card-border-radius);
  
    > hr {
      margin-right: 0;
      margin-left: 0;
    }
  
    > .list-group:first-child {
      .list-group-item:first-child {
        @include border-top-radius($card-border-radius);
      }
    }
  
    > .list-group:last-child {
      .list-group-item:last-child {
        @include border-bottom-radius($card-border-radius);
      }
    }
  }
  
  .card-body {
    // Enable `flex-grow: 1` for decks and groups so that card blocks take up
    // as much space as possible, ensuring footers are aligned to the bottom.
    flex: 1 1 auto;
    // Workaround for the image size bug in IE
    // See: https://github.com/twbs/bootstrap/pull/28855
    min-height: 1px;
    padding: $card-spacer-x;
    color: $card-color;
  }
  
  .card-title {
    margin-bottom: $card-spacer-y;
  }
  
  .card-subtitle {
    margin-top: -$card-spacer-y / 2;
    margin-bottom: 0;
  }
  
  .card-text:last-child {
    margin-bottom: 0;
  }
  
  .card-link {
    @include hover() {
      text-decoration: none;
    }
  
    + .card-link {
      margin-left: $card-spacer-x;
    }
  }
  
  //
  // Optional textual caps
  //
  
  .card-header {
    padding: $card-spacer-y $card-spacer-x;
    margin-bottom: 0; // Removes the default margin-bottom of <hN>
    color: $card-cap-color;
    background-color: $card-cap-bg;
    border-bottom: $card-border-width solid $card-border-color;
  
    &:first-child {
      @include border-radius($card-inner-border-radius $card-inner-border-radius 0 0);
    }
  
    + .list-group {
      .list-group-item:first-child {
        border-top: 0;
      }
    }
  }
  
  .card-footer {
    padding: $card-spacer-y $card-spacer-x;
    background-color: $card-cap-bg;
    border-top: $card-border-width solid $card-border-color;
  
    &:last-child {
      @include border-radius(0 0 $card-inner-border-radius $card-inner-border-radius);
    }
  }
  
  
  //
  // Header navs
  //
  
  .card-header-tabs {
    margin-right: -$card-spacer-x / 2;
    margin-bottom: -$card-spacer-y;
    margin-left: -$card-spacer-x / 2;
    border-bottom: 0;
  }
  
  .card-header-pills {
    margin-right: -$card-spacer-x / 2;
    margin-left: -$card-spacer-x / 2;
  }
  
  // Card image
  .card-img-overlay {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    padding: $card-img-overlay-padding;
  }
  
  .card-img,
  .card-img-top,
  .card-img-bottom {
    flex-shrink: 0; // For IE: https://github.com/twbs/bootstrap/issues/29396
    width: 100%; // Required because we use flexbox and this inherently applies align-self: stretch
  }
  
  .card-img,
  .card-img-top {
    @include border-top-radius($card-inner-border-radius);
  }
  
  .card-img,
  .card-img-bottom {
    @include border-bottom-radius($card-inner-border-radius);
  }
  
  
  // Card deck
  
  .card-deck {
    .card {
      margin-bottom: $card-deck-margin;
    }
  
    @include media-breakpoint-up(sm) {
      display: flex;
      flex-flow: row wrap;
      margin-right: -$card-deck-margin;
      margin-left: -$card-deck-margin;
  
      .card {
        // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
        flex: 1 0 0%;
        margin-right: $card-deck-margin;
        margin-bottom: 0; // Override the default
        margin-left: $card-deck-margin;
      }
    }
  }
  
  
  //
  // Card groups
  //
  
  .card-group {
    // The child selector allows nested `.card` within `.card-group`
    // to display properly.
    > .card {
      margin-bottom: $card-group-margin;
    }
  
    @include media-breakpoint-up(sm) {
      display: flex;
      flex-flow: row wrap;
      // The child selector allows nested `.card` within `.card-group`
      // to display properly.
      > .card {
        // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
        flex: 1 0 0%;
        margin-bottom: 0;
  
        + .card {
          margin-left: 0;
          border-left: 0;
        }
  
        // Handle rounded corners
        @if $enable-rounded {
          &:not(:last-child) {
            @include border-right-radius(0);
  
            .card-img-top,
            .card-header {
              // stylelint-disable-next-line property-blacklist
              border-top-right-radius: 0;
            }
            .card-img-bottom,
            .card-footer {
              // stylelint-disable-next-line property-blacklist
              border-bottom-right-radius: 0;
            }
          }
  
          &:not(:first-child) {
            @include border-left-radius(0);
  
            .card-img-top,
            .card-header {
              // stylelint-disable-next-line property-blacklist
              border-top-left-radius: 0;
            }
            .card-img-bottom,
            .card-footer {
              // stylelint-disable-next-line property-blacklist
              border-bottom-left-radius: 0;
            }
          }
        }
      }
    }
  }
  
  
  //
  // Columns
  //
  
  .card-columns {
    .card {
      margin-bottom: $card-columns-margin;
    }
  
    @include media-breakpoint-up(sm) {
      column-count: $card-columns-count;
      column-gap: $card-columns-gap;
      orphans: 1;
      widows: 1;
  
      .card {
        display: inline-block; // Don't let them vertically span multiple columns
        width: 100%; // Don't let their width change
      }
    }
  }
  
  
  //
  // Accordion
  //
  
  .accordion {
    > .card {
      overflow: hidden;
  
      &:not(:last-of-type) {
        border-bottom: 0;
        @include border-bottom-radius(0);
      }
  
      &:not(:first-of-type) {
        @include border-top-radius(0);
      }
  
      > .card-header {
        @include border-radius(0);
        margin-bottom: -$card-border-width;
      }
    }
  }
// Notes on the classes:
//
// 1. .carousel.pointer-event should ideally be pan-y (to allow for users to scroll vertically)
//    even when their scroll action started on a carousel, but for compatibility (with Firefox)
//    we're preventing all actions instead
// 2. The .carousel-item-left and .carousel-item-right is used to indicate where
//    the active slide is heading.
// 3. .active.carousel-item is the current slide.
// 4. .active.carousel-item-left and .active.carousel-item-right is the current
//    slide in its in-transition state. Only one of these occurs at a time.
// 5. .carousel-item-next.carousel-item-left and .carousel-item-prev.carousel-item-right
//    is the upcoming slide in transition.

.carousel {
    position: relative;
  }
  
  .carousel.pointer-event {
    touch-action: pan-y;
  }
  
  .carousel-inner {
    position: relative;
    width: 100%;
    overflow: hidden;
    @include clearfix();
  }
  
  .carousel-item {
    position: relative;
    display: none;
    float: left;
    width: 100%;
    margin-right: -100%;
    backface-visibility: hidden;
    @include transition($carousel-transition);
  }
  
  .carousel-item.active,
  .carousel-item-next,
  .carousel-item-prev {
    display: block;
  }
  
  .carousel-item-next:not(.carousel-item-left),
  .active.carousel-item-right {
    transform: translateX(100%);
  }
  
  .carousel-item-prev:not(.carousel-item-right),
  .active.carousel-item-left {
    transform: translateX(-100%);
  }
  
  
  //
  // Alternate transitions
  //
  
  .carousel-fade {
    .carousel-item {
      opacity: 0;
      transition-property: opacity;
      transform: none;
    }
  
    .carousel-item.active,
    .carousel-item-next.carousel-item-left,
    .carousel-item-prev.carousel-item-right {
      z-index: 1;
      opacity: 1;
    }
  
    .active.carousel-item-left,
    .active.carousel-item-right {
      z-index: 0;
      opacity: 0;
      @include transition(opacity 0s $carousel-transition-duration);
    }
  }
  
  
  //
  // Left/right controls for nav
  //
  
  .carousel-control-prev,
  .carousel-control-next {
    position: absolute;
    top: 0;
    bottom: 0;
    z-index: 1;
    // Use flex for alignment (1-3)
    display: flex; // 1. allow flex styles
    align-items: center; // 2. vertically center contents
    justify-content: center; // 3. horizontally center contents
    width: $carousel-control-width;
    color: $carousel-control-color;
    text-align: center;
    opacity: $carousel-control-opacity;
    @include transition($carousel-control-transition);
  
    // Hover/focus state
    @include hover-focus() {
      color: $carousel-control-color;
      text-decoration: none;
      outline: 0;
      opacity: $carousel-control-hover-opacity;
    }
  }
  .carousel-control-prev {
    left: 0;
    @if $enable-gradients {
      background-image: linear-gradient(90deg, rgba($black, .25), rgba($black, .001));
    }
  }
  .carousel-control-next {
    right: 0;
    @if $enable-gradients {
      background-image: linear-gradient(270deg, rgba($black, .25), rgba($black, .001));
    }
  }
  
  // Icons for within
  .carousel-control-prev-icon,
  .carousel-control-next-icon {
    display: inline-block;
    width: $carousel-control-icon-width;
    height: $carousel-control-icon-width;
    background: no-repeat 50% / 100% 100%;
  }
  .carousel-control-prev-icon {
    background-image: escape-svg($carousel-control-prev-icon-bg);
  }
  .carousel-control-next-icon {
    background-image: escape-svg($carousel-control-next-icon-bg);
  }
  
  
  // Optional indicator pips
  //
  // Add an ordered list with the following class and add a list item for each
  // slide your carousel holds.
  
  .carousel-indicators {
    position: absolute;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 15;
    display: flex;
    justify-content: center;
    padding-left: 0; // override <ol> default
    // Use the .carousel-control's width as margin so we don't overlay those
    margin-right: $carousel-control-width;
    margin-left: $carousel-control-width;
    list-style: none;
  
    li {
      box-sizing: content-box;
      flex: 0 1 auto;
      width: $carousel-indicator-width;
      height: $carousel-indicator-height;
      margin-right: $carousel-indicator-spacer;
      margin-left: $carousel-indicator-spacer;
      text-indent: -999px;
      cursor: pointer;
      background-color: $carousel-indicator-active-bg;
      background-clip: padding-box;
      // Use transparent borders to increase the hit area by 10px on top and bottom.
      border-top: $carousel-indicator-hit-area-height solid transparent;
      border-bottom: $carousel-indicator-hit-area-height solid transparent;
      opacity: .5;
      @include transition($carousel-indicator-transition);
    }
  
    .active {
      opacity: 1;
    }
  }
  
  
  // Optional captions
  //
  //
  
  .carousel-caption {
    position: absolute;
    right: (100% - $carousel-caption-width) / 2;
    bottom: 20px;
    left: (100% - $carousel-caption-width) / 2;
    z-index: 10;
    padding-top: 20px;
    padding-bottom: 20px;
    color: $carousel-caption-color;
    text-align: center;
  }
  .close {
    float: right;
    @include font-size($close-font-size);
    font-weight: $close-font-weight;
    line-height: 1;
    color: $close-color;
    text-shadow: $close-text-shadow;
    opacity: .5;
  
    // Override <a>'s hover style
    @include hover() {
      color: $close-color;
      text-decoration: none;
    }
  
    &:not(:disabled):not(.disabled) {
      @include hover-focus() {
        opacity: .75;
      }
    }
  }
  
  // Additional properties for button version
  // iOS requires the button element instead of an anchor tag.
  // If you want the anchor version, it requires `href="#"`.
  // See https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile
  
  // stylelint-disable-next-line selector-no-qualifying-type
  button.close {
    padding: 0;
    background-color: transparent;
    border: 0;
    appearance: none;
  }
  
  // Future-proof disabling of clicks on `<a>` elements
  
  // stylelint-disable-next-line selector-no-qualifying-type
  a.close.disabled {
    pointer-events: none;
  }
// Inline code
code {
    @include font-size($code-font-size);
    color: $code-color;
    word-wrap: break-word;
  
    // Streamline the style when inside anchors to avoid broken underline and more
    a > & {
      color: inherit;
    }
  }
  
  // User input typically entered via keyboard
  kbd {
    padding: $kbd-padding-y $kbd-padding-x;
    @include font-size($kbd-font-size);
    color: $kbd-color;
    background-color: $kbd-bg;
    @include border-radius($border-radius-sm);
    @include box-shadow($kbd-box-shadow);
  
    kbd {
      padding: 0;
      @include font-size(100%);
      font-weight: $nested-kbd-font-weight;
      @include box-shadow(none);
    }
  }
  
  // Blocks of code
  pre {
    display: block;
    @include font-size($code-font-size);
    color: $pre-color;
  
    // Account for some code outputs that place code tags in pre tags
    code {
      @include font-size(inherit);
      color: inherit;
      word-break: normal;
    }
  }
  
  // Enable scrollable blocks of code
  .pre-scrollable {
    max-height: $pre-scrollable-max-height;
    overflow-y: scroll;
  }
// Embedded icons from Open Iconic.
// Released under MIT and copyright 2014 Waybury.
// https://useiconic.com/open


// Checkboxes and radios
//
// Base class takes care of all the key behavioral aspects.

.custom-control {
    position: relative;
    display: block;
    min-height: $font-size-base * $line-height-base;
    padding-left: $custom-control-gutter + $custom-control-indicator-size;
  }
  
  .custom-control-inline {
    display: inline-flex;
    margin-right: $custom-control-spacer-x;
  }
  
  .custom-control-input {
    position: absolute;
    left: 0;
    z-index: -1; // Put the input behind the label so it doesn't overlay text
    width: $custom-control-indicator-size;
    height: ($font-size-base * $line-height-base + $custom-control-indicator-size) / 2;
    opacity: 0;
  
    &:checked ~ .custom-control-label::before {
      color: $custom-control-indicator-checked-color;
      border-color: $custom-control-indicator-checked-border-color;
      @include gradient-bg($custom-control-indicator-checked-bg);
      @include box-shadow($custom-control-indicator-checked-box-shadow);
    }
  
    &:focus ~ .custom-control-label::before {
      // the mixin is not used here to make sure there is feedback
      @if $enable-shadows {
        box-shadow: $input-box-shadow, $input-focus-box-shadow;
      } @else {
        box-shadow: $custom-control-indicator-focus-box-shadow;
      }
    }
  
    &:focus:not(:checked) ~ .custom-control-label::before {
      border-color: $custom-control-indicator-focus-border-color;
    }
  
    &:not(:disabled):active ~ .custom-control-label::before {
      color: $custom-control-indicator-active-color;
      background-color: $custom-control-indicator-active-bg;
      border-color: $custom-control-indicator-active-border-color;
      @include box-shadow($custom-control-indicator-active-box-shadow);
    }
  
    // Use [disabled] and :disabled to work around https://github.com/twbs/bootstrap/issues/28247
    &[disabled],
    &:disabled {
      ~ .custom-control-label {
        color: $custom-control-label-disabled-color;
  
        &::before {
          background-color: $custom-control-indicator-disabled-bg;
        }
      }
    }
  }
  
  // Custom control indicators
  //
  // Build the custom controls out of pseudo-elements.
  
  .custom-control-label {
    position: relative;
    margin-bottom: 0;
    color: $custom-control-label-color;
    vertical-align: top;
    cursor: $custom-control-cursor;
  
    // Background-color and (when enabled) gradient
    &::before {
      position: absolute;
      top: ($font-size-base * $line-height-base - $custom-control-indicator-size) / 2;
      left: -($custom-control-gutter + $custom-control-indicator-size);
      display: block;
      width: $custom-control-indicator-size;
      height: $custom-control-indicator-size;
      pointer-events: none;
      content: "";
      background-color: $custom-control-indicator-bg;
      border: $custom-control-indicator-border-color solid $custom-control-indicator-border-width;
      @include box-shadow($custom-control-indicator-box-shadow);
    }
  
    // Foreground (icon)
    &::after {
      position: absolute;
      top: ($font-size-base * $line-height-base - $custom-control-indicator-size) / 2;
      left: -($custom-control-gutter + $custom-control-indicator-size);
      display: block;
      width: $custom-control-indicator-size;
      height: $custom-control-indicator-size;
      content: "";
      background: no-repeat 50% / #{$custom-control-indicator-bg-size};
    }
  }
  
  
  // Checkboxes
  //
  // Tweak just a few things for checkboxes.
  
  .custom-checkbox {
    .custom-control-label::before {
      @include border-radius($custom-checkbox-indicator-border-radius);
    }
  
    .custom-control-input:checked ~ .custom-control-label {
      &::after {
        background-image: escape-svg($custom-checkbox-indicator-icon-checked);
      }
    }
  
    .custom-control-input:indeterminate ~ .custom-control-label {
      &::before {
        border-color: $custom-checkbox-indicator-indeterminate-border-color;
        @include gradient-bg($custom-checkbox-indicator-indeterminate-bg);
        @include box-shadow($custom-checkbox-indicator-indeterminate-box-shadow);
      }
      &::after {
        background-image: escape-svg($custom-checkbox-indicator-icon-indeterminate);
      }
    }
  
    .custom-control-input:disabled {
      &:checked ~ .custom-control-label::before {
        background-color: $custom-control-indicator-checked-disabled-bg;
      }
      &:indeterminate ~ .custom-control-label::before {
        background-color: $custom-control-indicator-checked-disabled-bg;
      }
    }
  }
  
  // Radios
  //
  // Tweak just a few things for radios.
  
  .custom-radio {
    .custom-control-label::before {
      // stylelint-disable-next-line property-blacklist
      border-radius: $custom-radio-indicator-border-radius;
    }
  
    .custom-control-input:checked ~ .custom-control-label {
      &::after {
        background-image: escape-svg($custom-radio-indicator-icon-checked);
      }
    }
  
    .custom-control-input:disabled {
      &:checked ~ .custom-control-label::before {
        background-color: $custom-control-indicator-checked-disabled-bg;
      }
    }
  }
  
  
  // switches
  //
  // Tweak a few things for switches
  
  .custom-switch {
    padding-left: $custom-switch-width + $custom-control-gutter;
  
    .custom-control-label {
      &::before {
        left: -($custom-switch-width + $custom-control-gutter);
        width: $custom-switch-width;
        pointer-events: all;
        // stylelint-disable-next-line property-blacklist
        border-radius: $custom-switch-indicator-border-radius;
      }
  
      &::after {
        top: add(($font-size-base * $line-height-base - $custom-control-indicator-size) / 2, $custom-control-indicator-border-width * 2);
        left: add(-($custom-switch-width + $custom-control-gutter), $custom-control-indicator-border-width * 2);
        width: $custom-switch-indicator-size;
        height: $custom-switch-indicator-size;
        background-color: $custom-control-indicator-border-color;
        // stylelint-disable-next-line property-blacklist
        border-radius: $custom-switch-indicator-border-radius;
        @include transition(transform .15s ease-in-out, $custom-forms-transition);
      }
    }
  
    .custom-control-input:checked ~ .custom-control-label {
      &::after {
        background-color: $custom-control-indicator-bg;
        transform: translateX($custom-switch-width - $custom-control-indicator-size);
      }
    }
  
    .custom-control-input:disabled {
      &:checked ~ .custom-control-label::before {
        background-color: $custom-control-indicator-checked-disabled-bg;
      }
    }
  }
  
  
  // Select
  //
  // Replaces the browser default select with a custom one, mostly pulled from
  // https://primer.github.io/.
  //
  
  .custom-select {
    display: inline-block;
    width: 100%;
    height: $custom-select-height;
    padding: $custom-select-padding-y ($custom-select-padding-x + $custom-select-indicator-padding) $custom-select-padding-y $custom-select-padding-x;
    font-family: $custom-select-font-family;
    @include font-size($custom-select-font-size);
    font-weight: $custom-select-font-weight;
    line-height: $custom-select-line-height;
    color: $custom-select-color;
    vertical-align: middle;
    background: $custom-select-bg $custom-select-background;
    border: $custom-select-border-width solid $custom-select-border-color;
    @include border-radius($custom-select-border-radius, 0);
    @include box-shadow($custom-select-box-shadow);
    appearance: none;
  
    &:focus {
      border-color: $custom-select-focus-border-color;
      outline: 0;
      @if $enable-shadows {
        box-shadow: $custom-select-box-shadow, $custom-select-focus-box-shadow;
      } @else {
        box-shadow: $custom-select-focus-box-shadow;
      }
  
      &::-ms-value {
        // For visual consistency with other platforms/browsers,
        // suppress the default white text on blue background highlight given to
        // the selected option text when the (still closed) <select> receives focus
        // in IE and (under certain conditions) Edge.
        // See https://github.com/twbs/bootstrap/issues/19398.
        color: $input-color;
        background-color: $input-bg;
      }
    }
  
    &[multiple],
    &[size]:not([size="1"]) {
      height: auto;
      padding-right: $custom-select-padding-x;
      background-image: none;
    }
  
    &:disabled {
      color: $custom-select-disabled-color;
      background-color: $custom-select-disabled-bg;
    }
  
    // Hides the default caret in IE11
    &::-ms-expand {
      display: none;
    }
  
    // Remove outline from select box in FF
    &:-moz-focusring {
      color: transparent;
      text-shadow: 0 0 0 $custom-select-color;
    }
  }
  
  .custom-select-sm {
    height: $custom-select-height-sm;
    padding-top: $custom-select-padding-y-sm;
    padding-bottom: $custom-select-padding-y-sm;
    padding-left: $custom-select-padding-x-sm;
    @include font-size($custom-select-font-size-sm);
  }
  
  .custom-select-lg {
    height: $custom-select-height-lg;
    padding-top: $custom-select-padding-y-lg;
    padding-bottom: $custom-select-padding-y-lg;
    padding-left: $custom-select-padding-x-lg;
    @include font-size($custom-select-font-size-lg);
  }
  
  
  // File
  //
  // Custom file input.
  
  .custom-file {
    position: relative;
    display: inline-block;
    width: 100%;
    height: $custom-file-height;
    margin-bottom: 0;
  }
  
  .custom-file-input {
    position: relative;
    z-index: 2;
    width: 100%;
    height: $custom-file-height;
    margin: 0;
    opacity: 0;
  
    &:focus ~ .custom-file-label {
      border-color: $custom-file-focus-border-color;
      box-shadow: $custom-file-focus-box-shadow;
    }
  
    // Use [disabled] and :disabled to work around https://github.com/twbs/bootstrap/issues/28247
    &[disabled] ~ .custom-file-label,
    &:disabled ~ .custom-file-label {
      background-color: $custom-file-disabled-bg;
    }
  
    @each $lang, $value in $custom-file-text {
      &:lang(#{$lang}) ~ .custom-file-label::after {
        content: $value;
      }
    }
  
    ~ .custom-file-label[data-browse]::after {
      content: attr(data-browse);
    }
  }
  
  .custom-file-label {
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    z-index: 1;
    height: $custom-file-height;
    padding: $custom-file-padding-y $custom-file-padding-x;
    font-family: $custom-file-font-family;
    font-weight: $custom-file-font-weight;
    line-height: $custom-file-line-height;
    color: $custom-file-color;
    background-color: $custom-file-bg;
    border: $custom-file-border-width solid $custom-file-border-color;
    @include border-radius($custom-file-border-radius);
    @include box-shadow($custom-file-box-shadow);
  
    &::after {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      z-index: 3;
      display: block;
      height: $custom-file-height-inner;
      padding: $custom-file-padding-y $custom-file-padding-x;
      line-height: $custom-file-line-height;
      color: $custom-file-button-color;
      content: "Browse";
      @include gradient-bg($custom-file-button-bg);
      border-left: inherit;
      @include border-radius(0 $custom-file-border-radius $custom-file-border-radius 0);
    }
  }
  
  // Range
  //
  // Style range inputs the same across browsers. Vendor-specific rules for pseudo
  // elements cannot be mixed. As such, there are no shared styles for focus or
  // active states on prefixed selectors.
  
  .custom-range {
    width: 100%;
    height: add($custom-range-thumb-height, $custom-range-thumb-focus-box-shadow-width * 2);
    padding: 0; // Need to reset padding
    background-color: transparent;
    appearance: none;
  
    &:focus {
      outline: none;
  
      // Pseudo-elements must be split across multiple rulesets to have an effect.
      // No box-shadow() mixin for focus accessibility.
      &::-webkit-slider-thumb { box-shadow: $custom-range-thumb-focus-box-shadow; }
      &::-moz-range-thumb     { box-shadow: $custom-range-thumb-focus-box-shadow; }
      &::-ms-thumb            { box-shadow: $custom-range-thumb-focus-box-shadow; }
    }
  
    &::-moz-focus-outer {
      border: 0;
    }
  
    &::-webkit-slider-thumb {
      width: $custom-range-thumb-width;
      height: $custom-range-thumb-height;
      margin-top: ($custom-range-track-height - $custom-range-thumb-height) / 2; // Webkit specific
      @include gradient-bg($custom-range-thumb-bg);
      border: $custom-range-thumb-border;
      @include border-radius($custom-range-thumb-border-radius);
      @include box-shadow($custom-range-thumb-box-shadow);
      @include transition($custom-forms-transition);
      appearance: none;
  
      &:active {
        @include gradient-bg($custom-range-thumb-active-bg);
      }
    }
  
    &::-webkit-slider-runnable-track {
      width: $custom-range-track-width;
      height: $custom-range-track-height;
      color: transparent; // Why?
      cursor: $custom-range-track-cursor;
      background-color: $custom-range-track-bg;
      border-color: transparent;
      @include border-radius($custom-range-track-border-radius);
      @include box-shadow($custom-range-track-box-shadow);
    }
  
    &::-moz-range-thumb {
      width: $custom-range-thumb-width;
      height: $custom-range-thumb-height;
      @include gradient-bg($custom-range-thumb-bg);
      border: $custom-range-thumb-border;
      @include border-radius($custom-range-thumb-border-radius);
      @include box-shadow($custom-range-thumb-box-shadow);
      @include transition($custom-forms-transition);
      appearance: none;
  
      &:active {
        @include gradient-bg($custom-range-thumb-active-bg);
      }
    }
  
    &::-moz-range-track {
      width: $custom-range-track-width;
      height: $custom-range-track-height;
      color: transparent;
      cursor: $custom-range-track-cursor;
      background-color: $custom-range-track-bg;
      border-color: transparent; // Firefox specific?
      @include border-radius($custom-range-track-border-radius);
      @include box-shadow($custom-range-track-box-shadow);
    }
  
    &::-ms-thumb {
      width: $custom-range-thumb-width;
      height: $custom-range-thumb-height;
      margin-top: 0; // Edge specific
      margin-right: $custom-range-thumb-focus-box-shadow-width; // Workaround that overflowed box-shadow is hidden.
      margin-left: $custom-range-thumb-focus-box-shadow-width;  // Workaround that overflowed box-shadow is hidden.
      @include gradient-bg($custom-range-thumb-bg);
      border: $custom-range-thumb-border;
      @include border-radius($custom-range-thumb-border-radius);
      @include box-shadow($custom-range-thumb-box-shadow);
      @include transition($custom-forms-transition);
      appearance: none;
  
      &:active {
        @include gradient-bg($custom-range-thumb-active-bg);
      }
    }
  
    &::-ms-track {
      width: $custom-range-track-width;
      height: $custom-range-track-height;
      color: transparent;
      cursor: $custom-range-track-cursor;
      background-color: transparent;
      border-color: transparent;
      border-width: $custom-range-thumb-height / 2;
      @include box-shadow($custom-range-track-box-shadow);
    }
  
    &::-ms-fill-lower {
      background-color: $custom-range-track-bg;
      @include border-radius($custom-range-track-border-radius);
    }
  
    &::-ms-fill-upper {
      margin-right: 15px; // arbitrary?
      background-color: $custom-range-track-bg;
      @include border-radius($custom-range-track-border-radius);
    }
  
    &:disabled {
      &::-webkit-slider-thumb {
        background-color: $custom-range-thumb-disabled-bg;
      }
  
      &::-webkit-slider-runnable-track {
        cursor: default;
      }
  
      &::-moz-range-thumb {
        background-color: $custom-range-thumb-disabled-bg;
      }
  
      &::-moz-range-track {
        cursor: default;
      }
  
      &::-ms-thumb {
        background-color: $custom-range-thumb-disabled-bg;
      }
    }
  }
  
  .custom-control-label::before,
  .custom-file-label,
  .custom-select {
    @include transition($custom-forms-transition);
  }
// The dropdown wrapper (`<div>`)
.dropup,
.dropright,
.dropdown,
.dropleft {
  position: relative;
}

.dropdown-toggle {
  white-space: nowrap;

  // Generate the caret automatically
  @include caret();
}

// The dropdown menu
.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  z-index: $zindex-dropdown;
  display: none; // none by default, but block on "open" of the menu
  float: left;
  min-width: $dropdown-min-width;
  padding: $dropdown-padding-y 0;
  margin: $dropdown-spacer 0 0; // override default ul
  @include font-size($dropdown-font-size);
  color: $dropdown-color;
  text-align: left; // Ensures proper alignment if parent has it changed (e.g., modal footer)
  list-style: none;
  background-color: $dropdown-bg;
  background-clip: padding-box;
  border: $dropdown-border-width solid $dropdown-border-color;
  @include border-radius($dropdown-border-radius);
  @include box-shadow($dropdown-box-shadow);
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .dropdown-menu#{$infix}-left {
      right: auto;
      left: 0;
    }

    .dropdown-menu#{$infix}-right {
      right: 0;
      left: auto;
    }
  }
}

// Allow for dropdowns to go bottom up (aka, dropup-menu)
// Just add .dropup after the standard .dropdown class and you're set.
.dropup {
  .dropdown-menu {
    top: auto;
    bottom: 100%;
    margin-top: 0;
    margin-bottom: $dropdown-spacer;
  }

  .dropdown-toggle {
    @include caret(up);
  }
}

.dropright {
  .dropdown-menu {
    top: 0;
    right: auto;
    left: 100%;
    margin-top: 0;
    margin-left: $dropdown-spacer;
  }

  .dropdown-toggle {
    @include caret(right);
    &::after {
      vertical-align: 0;
    }
  }
}

.dropleft {
  .dropdown-menu {
    top: 0;
    right: 100%;
    left: auto;
    margin-top: 0;
    margin-right: $dropdown-spacer;
  }

  .dropdown-toggle {
    @include caret(left);
    &::before {
      vertical-align: 0;
    }
  }
}

// When enabled Popper.js, reset basic dropdown position
// stylelint-disable-next-line no-duplicate-selectors
.dropdown-menu {
  &[x-placement^="top"],
  &[x-placement^="right"],
  &[x-placement^="bottom"],
  &[x-placement^="left"] {
    right: auto;
    bottom: auto;
  }
}

// Dividers (basically an `<hr>`) within the dropdown
.dropdown-divider {
  @include nav-divider($dropdown-divider-bg, $dropdown-divider-margin-y, true);
}

// Links, buttons, and more within the dropdown menu
//
// `<button>`-specific styles are denoted with `// For <button>s`
.dropdown-item {
  display: block;
  width: 100%; // For `<button>`s
  padding: $dropdown-item-padding-y $dropdown-item-padding-x;
  clear: both;
  font-weight: $font-weight-normal;
  color: $dropdown-link-color;
  text-align: inherit; // For `<button>`s
  white-space: nowrap; // prevent links from randomly breaking onto new lines
  background-color: transparent; // For `<button>`s
  border: 0; // For `<button>`s

  // Prevent dropdown overflow if there's no padding
  // See https://github.com/twbs/bootstrap/pull/27703
  @if $dropdown-padding-y == 0 {
    &:first-child {
      @include border-top-radius($dropdown-inner-border-radius);
    }

    &:last-child {
      @include border-bottom-radius($dropdown-inner-border-radius);
    }
  }

  @include hover-focus() {
    color: $dropdown-link-hover-color;
    text-decoration: none;
    @include gradient-bg($dropdown-link-hover-bg);
  }

  &.active,
  &:active {
    color: $dropdown-link-active-color;
    text-decoration: none;
    @include gradient-bg($dropdown-link-active-bg);
  }

  &.disabled,
  &:disabled {
    color: $dropdown-link-disabled-color;
    pointer-events: none;
    background-color: transparent;
    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }
}

.dropdown-menu.show {
  display: block;
}

// Dropdown section headers
.dropdown-header {
  display: block;
  padding: $dropdown-padding-y $dropdown-item-padding-x;
  margin-bottom: 0; // for use with heading elements
  @include font-size($font-size-sm);
  color: $dropdown-header-color;
  white-space: nowrap; // as with > li > a
}

// Dropdown text
.dropdown-item-text {
  display: block;
  padding: $dropdown-item-padding-y $dropdown-item-padding-x;
  color: $dropdown-link-color;
}
// stylelint-disable selector-no-qualifying-type

//
// Textual form controls
//

.form-control {
    display: block;
    width: 100%;
    height: $input-height;
    padding: $input-padding-y $input-padding-x;
    font-family: $input-font-family;
    @include font-size($input-font-size);
    font-weight: $input-font-weight;
    line-height: $input-line-height;
    color: $input-color;
    background-color: $input-bg;
    background-clip: padding-box;
    border: $input-border-width solid $input-border-color;
  
    // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
    @include border-radius($input-border-radius, 0);
  
    @include box-shadow($input-box-shadow);
    @include transition($input-transition);
  
    // Unstyle the caret on `<select>`s in IE10+.
    &::-ms-expand {
      background-color: transparent;
      border: 0;
    }
  
    // Remove select outline from select box in FF
    &:-moz-focusring {
      color: transparent;
      text-shadow: 0 0 0 $input-color;
    }
  
    // Customize the `:focus` state to imitate native WebKit styles.
    @include form-control-focus($ignore-warning: true);
  
    // Placeholder
    &::placeholder {
      color: $input-placeholder-color;
      // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
      opacity: 1;
    }
  
    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway.
    &:disabled,
    &[readonly] {
      background-color: $input-disabled-bg;
      // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
      opacity: 1;
    }
  }
  
  select.form-control {
    &:focus::-ms-value {
      // Suppress the nested default white text on blue background highlight given to
      // the selected option text when the (still closed) <select> receives focus
      // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
      // match the appearance of the native widget.
      // See https://github.com/twbs/bootstrap/issues/19398.
      color: $input-color;
      background-color: $input-bg;
    }
  }
  
  // Make file inputs better match text inputs by forcing them to new lines.
  .form-control-file,
  .form-control-range {
    display: block;
    width: 100%;
  }
  
  
  //
  // Labels
  //
  
  // For use with horizontal and inline forms, when you need the label (or legend)
  // text to align with the form controls.
  .col-form-label {
    padding-top: add($input-padding-y, $input-border-width);
    padding-bottom: add($input-padding-y, $input-border-width);
    margin-bottom: 0; // Override the `<label>/<legend>` default
    @include font-size(inherit); // Override the `<legend>` default
    line-height: $input-line-height;
  }
  
  .col-form-label-lg {
    padding-top: add($input-padding-y-lg, $input-border-width);
    padding-bottom: add($input-padding-y-lg, $input-border-width);
    @include font-size($input-font-size-lg);
    line-height: $input-line-height-lg;
  }
  
  .col-form-label-sm {
    padding-top: add($input-padding-y-sm, $input-border-width);
    padding-bottom: add($input-padding-y-sm, $input-border-width);
    @include font-size($input-font-size-sm);
    line-height: $input-line-height-sm;
  }
  
  
  // Readonly controls as plain text
  //
  // Apply class to a readonly input to make it appear like regular plain
  // text (without any border, background color, focus indicator)
  
  .form-control-plaintext {
    display: block;
    width: 100%;
    padding: $input-padding-y 0;
    margin-bottom: 0; // match inputs if this class comes on inputs with default margins
    @include font-size($input-font-size);
    line-height: $input-line-height;
    color: $input-plaintext-color;
    background-color: transparent;
    border: solid transparent;
    border-width: $input-border-width 0;
  
    &.form-control-sm,
    &.form-control-lg {
      padding-right: 0;
      padding-left: 0;
    }
  }
  
  
  // Form control sizing
  //
  // Build on `.form-control` with modifier classes to decrease or increase the
  // height and font-size of form controls.
  //
  // Repeated in `_input_group.scss` to avoid Sass extend issues.
  
  .form-control-sm {
    height: $input-height-sm;
    padding: $input-padding-y-sm $input-padding-x-sm;
    @include font-size($input-font-size-sm);
    line-height: $input-line-height-sm;
    @include border-radius($input-border-radius-sm);
  }
  
  .form-control-lg {
    height: $input-height-lg;
    padding: $input-padding-y-lg $input-padding-x-lg;
    @include font-size($input-font-size-lg);
    line-height: $input-line-height-lg;
    @include border-radius($input-border-radius-lg);
  }
  
  // stylelint-disable-next-line no-duplicate-selectors
  select.form-control {
    &[size],
    &[multiple] {
      height: auto;
    }
  }
  
  textarea.form-control {
    height: auto;
  }
  
  // Form groups
  //
  // Designed to help with the organization and spacing of vertical forms. For
  // horizontal forms, use the predefined grid classes.
  
  .form-group {
    margin-bottom: $form-group-margin-bottom;
  }
  
  .form-text {
    display: block;
    margin-top: $form-text-margin-top;
  }
  
  
  // Form grid
  //
  // Special replacement for our grid system's `.row` for tighter form layouts.
  
  .form-row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -$form-grid-gutter-width / 2;
    margin-left: -$form-grid-gutter-width / 2;
  
    > .col,
    > [class*="col-"] {
      padding-right: $form-grid-gutter-width / 2;
      padding-left: $form-grid-gutter-width / 2;
    }
  }
  
  
  // Checkboxes and radios
  //
  // Indent the labels to position radios/checkboxes as hanging controls.
  
  .form-check {
    position: relative;
    display: block;
    padding-left: $form-check-input-gutter;
  }
  
  .form-check-input {
    position: absolute;
    margin-top: $form-check-input-margin-y;
    margin-left: -$form-check-input-gutter;
  
    // Use [disabled] and :disabled for workaround https://github.com/twbs/bootstrap/issues/28247
    &[disabled] ~ .form-check-label,
    &:disabled ~ .form-check-label {
      color: $text-muted;
    }
  }
  
  .form-check-label {
    margin-bottom: 0; // Override default `<label>` bottom margin
  }
  
  .form-check-inline {
    display: inline-flex;
    align-items: center;
    padding-left: 0; // Override base .form-check
    margin-right: $form-check-inline-margin-x;
  
    // Undo .form-check-input defaults and add some `margin-right`.
    .form-check-input {
      position: static;
      margin-top: 0;
      margin-right: $form-check-inline-input-margin-x;
      margin-left: 0;
    }
  }
  
  
  // Form validation
  //
  // Provide feedback to users when form field values are valid or invalid. Works
  // primarily for client-side validation via scoped `:invalid` and `:valid`
  // pseudo-classes but also includes `.is-invalid` and `.is-valid` classes for
  // server side validation.
  
  @each $state, $data in $form-validation-states {
    @include form-validation-state($state, map-get($data, color), map-get($data, icon));
  }
  
  // Inline forms
  //
  // Make forms appear inline(-block) by adding the `.form-inline` class. Inline
  // forms begin stacked on extra small (mobile) devices and then go inline when
  // viewports reach <768px.
  //
  // Requires wrapping inputs and labels with `.form-group` for proper display of
  // default HTML form controls and our custom form controls (e.g., input groups).
  
  .form-inline {
    display: flex;
    flex-flow: row wrap;
    align-items: center; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)
  
    // Because we use flex, the initial sizing of checkboxes is collapsed and
    // doesn't occupy the full-width (which is what we want for xs grid tier),
    // so we force that here.
    .form-check {
      width: 100%;
    }
  
    // Kick in the inline
    @include media-breakpoint-up(sm) {
      label {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 0;
      }
  
      // Inline-block all the things for "inline"
      .form-group {
        display: flex;
        flex: 0 0 auto;
        flex-flow: row wrap;
        align-items: center;
        margin-bottom: 0;
      }
  
      // Allow folks to *not* use `.form-group`
      .form-control {
        display: inline-block;
        width: auto; // Prevent labels from stacking above inputs in `.form-group`
        vertical-align: middle;
      }
  
      // Make static controls behave like regular ones
      .form-control-plaintext {
        display: inline-block;
      }
  
      .input-group,
      .custom-select {
        width: auto;
      }
  
      // Remove default margin on radios/checkboxes that were used for stacking, and
      // then undo the floating of radios and checkboxes to match.
      .form-check {
        display: flex;
        align-items: center;
        justify-content: center;
        width: auto;
        padding-left: 0;
      }
      .form-check-input {
        position: relative;
        flex-shrink: 0;
        margin-top: 0;
        margin-right: $form-check-input-margin-x;
        margin-left: 0;
      }
  
      .custom-control {
        align-items: center;
        justify-content: center;
      }
      .custom-control-label {
        margin-bottom: 0;
      }
    }
  }
// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
    // Single container class with breakpoint max-widths
    .container {
      @include make-container();
      @include make-container-max-widths();
    }
  
    // 100% wide container at all breakpoints
    .container-fluid {
      @include make-container();
    }
  
    // Responsive containers that are 100% wide until a breakpoint
    @each $breakpoint, $container-max-width in $container-max-widths {
      .container-#{$breakpoint} {
        @extend .container-fluid;
      }
  
      @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
        %responsive-container-#{$breakpoint} {
          max-width: $container-max-width;
        }
  
        @each $name, $width in $grid-breakpoints {
          @if ($container-max-width > $width or $breakpoint == $name) {
            .container#{breakpoint-infix($name, $grid-breakpoints)} {
              @extend %responsive-container-#{$breakpoint};
            }
          }
        }
      }
    }
  }
  
  
  // Row
  //
  // Rows contain your columns.
  
  @if $enable-grid-classes {
    .row {
      @include make-row();
    }
  
    // Remove the negative margin from default .row, then the horizontal padding
    // from all immediate children columns (to prevent runaway style inheritance).
    .no-gutters {
      margin-right: 0;
      margin-left: 0;
  
      > .col,
      > [class*="col-"] {
        padding-right: 0;
        padding-left: 0;
      }
    }
  }
  
  // Columns
  //
  // Common styles for small and large grid columns
  
  @if $enable-grid-classes {
    @include make-grid-columns();
  }
// Responsive images (ensure images don't scale beyond their parents)
//
// This is purposefully opt-in via an explicit class rather than being the default for all `<img>`s.
// We previously tried the "images are responsive by default" approach in Bootstrap v2,
// and abandoned it in Bootstrap v3 because it breaks lots of third-party widgets (including Google Maps)
// which weren't expecting the images within themselves to be involuntarily resized.
// See also https://github.com/twbs/bootstrap/issues/18178
.img-fluid {
    @include img-fluid();
  }
  
  
  // Image thumbnails
  .img-thumbnail {
    padding: $thumbnail-padding;
    background-color: $thumbnail-bg;
    border: $thumbnail-border-width solid $thumbnail-border-color;
    @include border-radius($thumbnail-border-radius);
    @include box-shadow($thumbnail-box-shadow);
  
    // Keep them at most 100% wide
    @include img-fluid();
  }
  
  //
  // Figures
  //
  
  .figure {
    // Ensures the caption's text aligns with the image.
    display: inline-block;
  }
  
  .figure-img {
    margin-bottom: $spacer / 2;
    line-height: 1;
  }
  
  .figure-caption {
    @include font-size($figure-caption-font-size);
    color: $figure-caption-color;
  }
// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.input-group {
    position: relative;
    display: flex;
    flex-wrap: wrap; // For form validation feedback
    align-items: stretch;
    width: 100%;
  
    > .form-control,
    > .form-control-plaintext,
    > .custom-select,
    > .custom-file {
      position: relative; // For focus state's z-index
      flex: 1 1 0%;
      min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
      margin-bottom: 0;
  
      + .form-control,
      + .custom-select,
      + .custom-file {
        margin-left: -$input-border-width;
      }
    }
  
    // Bring the "active" form control to the top of surrounding elements
    > .form-control:focus,
    > .custom-select:focus,
    > .custom-file .custom-file-input:focus ~ .custom-file-label {
      z-index: 3;
    }
  
    // Bring the custom file input above the label
    > .custom-file .custom-file-input:focus {
      z-index: 4;
    }
  
    > .form-control,
    > .custom-select {
      &:not(:last-child) { @include border-right-radius(0); }
      &:not(:first-child) { @include border-left-radius(0); }
    }
  
    // Custom file inputs have more complex markup, thus requiring different
    // border-radius overrides.
    > .custom-file {
      display: flex;
      align-items: center;
  
      &:not(:last-child) .custom-file-label,
      &:not(:last-child) .custom-file-label::after { @include border-right-radius(0); }
      &:not(:first-child) .custom-file-label { @include border-left-radius(0); }
    }
  }
  
  
  // Prepend and append
  //
  // While it requires one extra layer of HTML for each, dedicated prepend and
  // append elements allow us to 1) be less clever, 2) simplify our selectors, and
  // 3) support HTML5 form validation.
  
  .input-group-prepend,
  .input-group-append {
    display: flex;
  
    // Ensure buttons are always above inputs for more visually pleasing borders.
    // This isn't needed for `.input-group-text` since it shares the same border-color
    // as our inputs.
    .btn {
      position: relative;
      z-index: 2;
  
      &:focus {
        z-index: 3;
      }
    }
  
    .btn + .btn,
    .btn + .input-group-text,
    .input-group-text + .input-group-text,
    .input-group-text + .btn {
      margin-left: -$input-border-width;
    }
  }
  
  .input-group-prepend { margin-right: -$input-border-width; }
  .input-group-append { margin-left: -$input-border-width; }
  
  
  // Textual addons
  //
  // Serves as a catch-all element for any text or radio/checkbox input you wish
  // to prepend or append to an input.
  
  .input-group-text {
    display: flex;
    align-items: center;
    padding: $input-padding-y $input-padding-x;
    margin-bottom: 0; // Allow use of <label> elements by overriding our default margin-bottom
    @include font-size($input-font-size); // Match inputs
    font-weight: $font-weight-normal;
    line-height: $input-line-height;
    color: $input-group-addon-color;
    text-align: center;
    white-space: nowrap;
    background-color: $input-group-addon-bg;
    border: $input-border-width solid $input-group-addon-border-color;
    @include border-radius($input-border-radius);
  
    // Nuke default margins from checkboxes and radios to vertically center within.
    input[type="radio"],
    input[type="checkbox"] {
      margin-top: 0;
    }
  }
  
  
  // Sizing
  //
  // Remix the default form control sizing classes into new ones for easier
  // manipulation.
  
  .input-group-lg > .form-control:not(textarea),
  .input-group-lg > .custom-select {
    height: $input-height-lg;
  }
  
  .input-group-lg > .form-control,
  .input-group-lg > .custom-select,
  .input-group-lg > .input-group-prepend > .input-group-text,
  .input-group-lg > .input-group-append > .input-group-text,
  .input-group-lg > .input-group-prepend > .btn,
  .input-group-lg > .input-group-append > .btn {
    padding: $input-padding-y-lg $input-padding-x-lg;
    @include font-size($input-font-size-lg);
    line-height: $input-line-height-lg;
    @include border-radius($input-border-radius-lg);
  }
  
  .input-group-sm > .form-control:not(textarea),
  .input-group-sm > .custom-select {
    height: $input-height-sm;
  }
  
  .input-group-sm > .form-control,
  .input-group-sm > .custom-select,
  .input-group-sm > .input-group-prepend > .input-group-text,
  .input-group-sm > .input-group-append > .input-group-text,
  .input-group-sm > .input-group-prepend > .btn,
  .input-group-sm > .input-group-append > .btn {
    padding: $input-padding-y-sm $input-padding-x-sm;
    @include font-size($input-font-size-sm);
    line-height: $input-line-height-sm;
    @include border-radius($input-border-radius-sm);
  }
  
  .input-group-lg > .custom-select,
  .input-group-sm > .custom-select {
    padding-right: $custom-select-padding-x + $custom-select-indicator-padding;
  }
  
  
  // Prepend and append rounded corners
  //
  // These rulesets must come after the sizing ones to properly override sm and lg
  // border-radius values when extending. They're more specific than we'd like
  // with the `.input-group >` part, but without it, we cannot override the sizing.
  
  
  .input-group > .input-group-prepend > .btn,
  .input-group > .input-group-prepend > .input-group-text,
  .input-group > .input-group-append:not(:last-child) > .btn,
  .input-group > .input-group-append:not(:last-child) > .input-group-text,
  .input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),
  .input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {
    @include border-right-radius(0);
  }
  
  .input-group > .input-group-append > .btn,
  .input-group > .input-group-append > .input-group-text,
  .input-group > .input-group-prepend:not(:first-child) > .btn,
  .input-group > .input-group-prepend:not(:first-child) > .input-group-text,
  .input-group > .input-group-prepend:first-child > .btn:not(:first-child),
  .input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {
    @include border-left-radius(0);
  }
  .jumbotron {
    padding: $jumbotron-padding ($jumbotron-padding / 2);
    margin-bottom: $jumbotron-padding;
    color: $jumbotron-color;
    background-color: $jumbotron-bg;
    @include border-radius($border-radius-lg);
  
    @include media-breakpoint-up(sm) {
      padding: ($jumbotron-padding * 2) $jumbotron-padding;
    }
  }
  
  .jumbotron-fluid {
    padding-right: 0;
    padding-left: 0;
    @include border-radius(0);
  }
// Base class
//
// Easily usable on <ul>, <ol>, or <div>.

.list-group {
    display: flex;
    flex-direction: column;
  
    // No need to set list-style: none; since .list-group-item is block level
    padding-left: 0; // reset padding because ul and ol
    margin-bottom: 0;
  }
  
  
  // Interactive list items
  //
  // Use anchor or button elements instead of `li`s or `div`s to create interactive
  // list items. Includes an extra `.active` modifier class for selected items.
  
  .list-group-item-action {
    width: 100%; // For `<button>`s (anchors become 100% by default though)
    color: $list-group-action-color;
    text-align: inherit; // For `<button>`s (anchors inherit)
  
    // Hover state
    @include hover-focus() {
      z-index: 1; // Place hover/focus items above their siblings for proper border styling
      color: $list-group-action-hover-color;
      text-decoration: none;
      background-color: $list-group-hover-bg;
    }
  
    &:active {
      color: $list-group-action-active-color;
      background-color: $list-group-action-active-bg;
    }
  }
  
  
  // Individual list items
  //
  // Use on `li`s or `div`s within the `.list-group` parent.
  
  .list-group-item {
    position: relative;
    display: block;
    padding: $list-group-item-padding-y $list-group-item-padding-x;
    color: $list-group-color;
    background-color: $list-group-bg;
    border: $list-group-border-width solid $list-group-border-color;
  
    &:first-child {
      @include border-top-radius($list-group-border-radius);
    }
  
    &:last-child {
      @include border-bottom-radius($list-group-border-radius);
    }
  
    &.disabled,
    &:disabled {
      color: $list-group-disabled-color;
      pointer-events: none;
      background-color: $list-group-disabled-bg;
    }
  
    // Include both here for `<a>`s and `<button>`s
    &.active {
      z-index: 2; // Place active items above their siblings for proper border styling
      color: $list-group-active-color;
      background-color: $list-group-active-bg;
      border-color: $list-group-active-border-color;
    }
  
    & + & {
      border-top-width: 0;
  
      &.active {
        margin-top: -$list-group-border-width;
        border-top-width: $list-group-border-width;
      }
    }
  }
  
  
  // Horizontal
  //
  // Change the layout of list group items from vertical (default) to horizontal.
  
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  
      .list-group-horizontal#{$infix} {
        flex-direction: row;
  
        .list-group-item {
          &:first-child {
            @include border-bottom-left-radius($list-group-border-radius);
            @include border-top-right-radius(0);
          }
  
          &:last-child {
            @include border-top-right-radius($list-group-border-radius);
            @include border-bottom-left-radius(0);
          }
  
          &.active {
            margin-top: 0;
          }
  
          & + .list-group-item {
            border-top-width: $list-group-border-width;
            border-left-width: 0;
  
            &.active {
              margin-left: -$list-group-border-width;
              border-left-width: $list-group-border-width;
            }
          }
        }
      }
    }
  }
  
  
  // Flush list items
  //
  // Remove borders and border-radius to keep list group items edge-to-edge. Most
  // useful within other components (e.g., cards).
  
  .list-group-flush {
    .list-group-item {
      border-right-width: 0;
      border-left-width: 0;
      @include border-radius(0);
  
      &:first-child {
        border-top-width: 0;
      }
    }
  
    &:last-child {
      .list-group-item:last-child {
        border-bottom-width: 0;
      }
    }
  }
  
  
  // Contextual variants
  //
  // Add modifier classes to change text and background color on individual items.
  // Organizationally, this must come after the `:hover` states.
  
  @each $color, $value in $theme-colors {
    @include list-group-item-variant($color, theme-color-level($color, -9), theme-color-level($color, 6));
  }
  .media {
    display: flex;
    align-items: flex-start;
  }
  
  .media-body {
    flex: 1;
  }
// .modal-open      - body class for killing the scroll
// .modal           - container to scroll within
// .modal-dialog    - positioning shell for the actual modal
// .modal-content   - actual modal w/ bg and corners and stuff


.modal-open {
    // Kill the scroll on the body
    overflow: hidden;
  
    .modal {
      overflow-x: hidden;
      overflow-y: auto;
    }
  }
  
  // Container that the modal scrolls within
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    z-index: $zindex-modal;
    display: none;
    width: 100%;
    height: 100%;
    overflow: hidden;
    // Prevent Chrome on Windows from adding a focus outline. For details, see
    // https://github.com/twbs/bootstrap/pull/10951.
    outline: 0;
    // We deliberately don't use `-webkit-overflow-scrolling: touch;` due to a
    // gnarly iOS Safari bug: https://bugs.webkit.org/show_bug.cgi?id=158342
    // See also https://github.com/twbs/bootstrap/issues/17695
  }
  
  // Shell div to position the modal with bottom padding
  .modal-dialog {
    position: relative;
    width: auto;
    margin: $modal-dialog-margin;
    // allow clicks to pass through for custom click handling to close modal
    pointer-events: none;
  
    // When fading in the modal, animate it to slide down
    .modal.fade & {
      @include transition($modal-transition);
      transform: $modal-fade-transform;
    }
    .modal.show & {
      transform: $modal-show-transform;
    }
  
    // When trying to close, animate focus to scale
    .modal.modal-static & {
      transform: $modal-scale-transform;
    }
  }
  
  .modal-dialog-scrollable {
    display: flex; // IE10/11
    max-height: subtract(100%, $modal-dialog-margin * 2);
  
    .modal-content {
      max-height: subtract(100vh, $modal-dialog-margin * 2); // IE10/11
      overflow: hidden;
    }
  
    .modal-header,
    .modal-footer {
      flex-shrink: 0;
    }
  
    .modal-body {
      overflow-y: auto;
    }
  }
  
  .modal-dialog-centered {
    display: flex;
    align-items: center;
    min-height: subtract(100%, $modal-dialog-margin * 2);
  
    // Ensure `modal-dialog-centered` extends the full height of the view (IE10/11)
    &::before {
      display: block; // IE10
      height: subtract(100vh, $modal-dialog-margin * 2);
      content: "";
    }
  
    // Ensure `.modal-body` shows scrollbar (IE10/11)
    &.modal-dialog-scrollable {
      flex-direction: column;
      justify-content: center;
      height: 100%;
  
      .modal-content {
        max-height: none;
      }
  
      &::before {
        content: none;
      }
    }
  }
  
  // Actual modal
  .modal-content {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%; // Ensure `.modal-content` extends the full width of the parent `.modal-dialog`
    // counteract the pointer-events: none; in the .modal-dialog
    color: $modal-content-color;
    pointer-events: auto;
    background-color: $modal-content-bg;
    background-clip: padding-box;
    border: $modal-content-border-width solid $modal-content-border-color;
    @include border-radius($modal-content-border-radius);
    @include box-shadow($modal-content-box-shadow-xs);
    // Remove focus outline from opened modal
    outline: 0;
  }
  
  // Modal background
  .modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    z-index: $zindex-modal-backdrop;
    width: 100vw;
    height: 100vh;
    background-color: $modal-backdrop-bg;
  
    // Fade for backdrop
    &.fade { opacity: 0; }
    &.show { opacity: $modal-backdrop-opacity; }
  }
  
  // Modal header
  // Top section of the modal w/ title and dismiss
  .modal-header {
    display: flex;
    align-items: flex-start; // so the close btn always stays on the upper right corner
    justify-content: space-between; // Put modal header elements (title and dismiss) on opposite ends
    padding: $modal-header-padding;
    border-bottom: $modal-header-border-width solid $modal-header-border-color;
    @include border-top-radius($modal-content-inner-border-radius);
  
    .close {
      padding: $modal-header-padding;
      // auto on the left force icon to the right even when there is no .modal-title
      margin: (-$modal-header-padding-y) (-$modal-header-padding-x) (-$modal-header-padding-y) auto;
    }
  }
  
  // Title text within header
  .modal-title {
    margin-bottom: 0;
    line-height: $modal-title-line-height;
  }
  
  // Modal body
  // Where all modal content resides (sibling of .modal-header and .modal-footer)
  .modal-body {
    position: relative;
    // Enable `flex-grow: 1` so that the body take up as much space as possible
    // when there should be a fixed height on `.modal-dialog`.
    flex: 1 1 auto;
    padding: $modal-inner-padding;
  }
  
  // Footer (for actions)
  .modal-footer {
    display: flex;
    flex-wrap: wrap;
    align-items: center; // vertically center
    justify-content: flex-end; // Right align buttons with flex property because text-align doesn't work on flex items
    padding: $modal-inner-padding - $modal-footer-margin-between / 2;
    border-top: $modal-footer-border-width solid $modal-footer-border-color;
    @include border-bottom-radius($modal-content-inner-border-radius);
  
    // Place margin between footer elements
    // This solution is far from ideal because of the universal selector usage,
    // but is needed to fix https://github.com/twbs/bootstrap/issues/24800
    // stylelint-disable-next-line selector-max-universal
    > * {
      margin: $modal-footer-margin-between / 2;
    }
  }
  
  // Measure scrollbar width for padding body during modal show/hide
  .modal-scrollbar-measure {
    position: absolute;
    top: -9999px;
    width: 50px;
    height: 50px;
    overflow: scroll;
  }
  
  // Scale up the modal
  @include media-breakpoint-up(sm) {
    // Automatically set modal's width for larger viewports
    .modal-dialog {
      max-width: $modal-md;
      margin: $modal-dialog-margin-y-sm-up auto;
    }
  
    .modal-dialog-scrollable {
      max-height: subtract(100%, $modal-dialog-margin-y-sm-up * 2);
  
      .modal-content {
        max-height: subtract(100vh, $modal-dialog-margin-y-sm-up * 2);
      }
    }
  
    .modal-dialog-centered {
      min-height: subtract(100%, $modal-dialog-margin-y-sm-up * 2);
  
      &::before {
        height: subtract(100vh, $modal-dialog-margin-y-sm-up * 2);
      }
    }
  
    .modal-content {
      @include box-shadow($modal-content-box-shadow-sm-up);
    }
  
    .modal-sm { max-width: $modal-sm; }
  }
  
  @include media-breakpoint-up(lg) {
    .modal-lg,
    .modal-xl {
      max-width: $modal-lg;
    }
  }
  
  @include media-breakpoint-up(xl) {
    .modal-xl { max-width: $modal-xl; }
  }
// Base class
//
// Kickstart any navigation component with a set of style resets. Works with
// `<nav>`s, `<ul>`s or `<ol>`s.

.nav {
    display: flex;
    flex-wrap: wrap;
    padding-left: 0;
    margin-bottom: 0;
    list-style: none;
  }
  
  .nav-link {
    display: block;
    padding: $nav-link-padding-y $nav-link-padding-x;
  
    @include hover-focus() {
      text-decoration: none;
    }
  
    // Disabled state lightens text
    &.disabled {
      color: $nav-link-disabled-color;
      pointer-events: none;
      cursor: default;
    }
  }
  
  //
  // Tabs
  //
  
  .nav-tabs {
    border-bottom: $nav-tabs-border-width solid $nav-tabs-border-color;
  
    .nav-item {
      margin-bottom: -$nav-tabs-border-width;
    }
  
    .nav-link {
      border: $nav-tabs-border-width solid transparent;
      @include border-top-radius($nav-tabs-border-radius);
  
      @include hover-focus() {
        border-color: $nav-tabs-link-hover-border-color;
      }
  
      &.disabled {
        color: $nav-link-disabled-color;
        background-color: transparent;
        border-color: transparent;
      }
    }
  
    .nav-link.active,
    .nav-item.show .nav-link {
      color: $nav-tabs-link-active-color;
      background-color: $nav-tabs-link-active-bg;
      border-color: $nav-tabs-link-active-border-color;
    }
  
    .dropdown-menu {
      // Make dropdown border overlap tab border
      margin-top: -$nav-tabs-border-width;
      // Remove the top rounded corners here since there is a hard edge above the menu
      @include border-top-radius(0);
    }
  }
  
  
  //
  // Pills
  //
  
  .nav-pills {
    .nav-link {
      @include border-radius($nav-pills-border-radius);
    }
  
    .nav-link.active,
    .show > .nav-link {
      color: $nav-pills-link-active-color;
      background-color: $nav-pills-link-active-bg;
    }
  }
  
  
  //
  // Justified variants
  //
  
  .nav-fill {
    .nav-item {
      flex: 1 1 auto;
      text-align: center;
    }
  }
  
  .nav-justified {
    .nav-item {
      flex-basis: 0;
      flex-grow: 1;
      text-align: center;
    }
  }
  
  
  // Tabbable tabs
  //
  // Hide tabbable panes to start, show them when `.active`
  
  .tab-content {
    > .tab-pane {
      display: none;
    }
    > .active {
      display: block;
    }
  }
  .pagination {
    display: flex;
    @include list-unstyled();
    @include border-radius();
  }
  
  .page-link {
    position: relative;
    display: block;
    padding: $pagination-padding-y $pagination-padding-x;
    margin-left: -$pagination-border-width;
    line-height: $pagination-line-height;
    color: $pagination-color;
    background-color: $pagination-bg;
    border: $pagination-border-width solid $pagination-border-color;
  
    &:hover {
      z-index: 2;
      color: $pagination-hover-color;
      text-decoration: none;
      background-color: $pagination-hover-bg;
      border-color: $pagination-hover-border-color;
    }
  
    &:focus {
      z-index: 3;
      outline: $pagination-focus-outline;
      box-shadow: $pagination-focus-box-shadow;
    }
  }
  
  .page-item {
    &:first-child {
      .page-link {
        margin-left: 0;
        @include border-left-radius($border-radius);
      }
    }
    &:last-child {
      .page-link {
        @include border-right-radius($border-radius);
      }
    }
  
    &.active .page-link {
      z-index: 3;
      color: $pagination-active-color;
      background-color: $pagination-active-bg;
      border-color: $pagination-active-border-color;
    }
  
    &.disabled .page-link {
      color: $pagination-disabled-color;
      pointer-events: none;
      // Opinionated: remove the "hand" cursor set previously for .page-link
      cursor: auto;
      background-color: $pagination-disabled-bg;
      border-color: $pagination-disabled-border-color;
    }
  }
  
  
  //
  // Sizing
  //
  
  .pagination-lg {
    @include pagination-size($pagination-padding-y-lg, $pagination-padding-x-lg, $font-size-lg, $line-height-lg, $border-radius-lg);
  }
  
  .pagination-sm {
    @include pagination-size($pagination-padding-y-sm, $pagination-padding-x-sm, $font-size-sm, $line-height-sm, $border-radius-sm);
  }
  .popover {
    position: absolute;
    top: 0;
    left: 0;
    z-index: $zindex-popover;
    display: block;
    max-width: $popover-max-width;
    // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.
    // So reset our font and text properties to avoid inheriting weird values.
    @include reset-text();
    @include font-size($popover-font-size);
    // Allow breaking very long words so they don't overflow the popover's bounds
    word-wrap: break-word;
    background-color: $popover-bg;
    background-clip: padding-box;
    border: $popover-border-width solid $popover-border-color;
    @include border-radius($popover-border-radius);
    @include box-shadow($popover-box-shadow);
  
    .arrow {
      position: absolute;
      display: block;
      width: $popover-arrow-width;
      height: $popover-arrow-height;
      margin: 0 $popover-border-radius;
  
      &::before,
      &::after {
        position: absolute;
        display: block;
        content: "";
        border-color: transparent;
        border-style: solid;
      }
    }
  }
  
  .bs-popover-top {
    margin-bottom: $popover-arrow-height;
  
    > .arrow {
      bottom: subtract(-$popover-arrow-height, $popover-border-width);
  
      &::before {
        bottom: 0;
        border-width: $popover-arrow-height ($popover-arrow-width / 2) 0;
        border-top-color: $popover-arrow-outer-color;
      }
  
      &::after {
        bottom: $popover-border-width;
        border-width: $popover-arrow-height ($popover-arrow-width / 2) 0;
        border-top-color: $popover-arrow-color;
      }
    }
  }
  
  .bs-popover-right {
    margin-left: $popover-arrow-height;
  
    > .arrow {
      left: subtract(-$popover-arrow-height, $popover-border-width);
      width: $popover-arrow-height;
      height: $popover-arrow-width;
      margin: $popover-border-radius 0; // make sure the arrow does not touch the popover's rounded corners
  
      &::before {
        left: 0;
        border-width: ($popover-arrow-width / 2) $popover-arrow-height ($popover-arrow-width / 2) 0;
        border-right-color: $popover-arrow-outer-color;
      }
  
      &::after {
        left: $popover-border-width;
        border-width: ($popover-arrow-width / 2) $popover-arrow-height ($popover-arrow-width / 2) 0;
        border-right-color: $popover-arrow-color;
      }
    }
  }
  
  .bs-popover-bottom {
    margin-top: $popover-arrow-height;
  
    > .arrow {
      top: subtract(-$popover-arrow-height, $popover-border-width);
  
      &::before {
        top: 0;
        border-width: 0 ($popover-arrow-width / 2) $popover-arrow-height ($popover-arrow-width / 2);
        border-bottom-color: $popover-arrow-outer-color;
      }
  
      &::after {
        top: $popover-border-width;
        border-width: 0 ($popover-arrow-width / 2) $popover-arrow-height ($popover-arrow-width / 2);
        border-bottom-color: $popover-arrow-color;
      }
    }
  
    // This will remove the popover-header's border just below the arrow
    .popover-header::before {
      position: absolute;
      top: 0;
      left: 50%;
      display: block;
      width: $popover-arrow-width;
      margin-left: -$popover-arrow-width / 2;
      content: "";
      border-bottom: $popover-border-width solid $popover-header-bg;
    }
  }
  
  .bs-popover-left {
    margin-right: $popover-arrow-height;
  
    > .arrow {
      right: subtract(-$popover-arrow-height, $popover-border-width);
      width: $popover-arrow-height;
      height: $popover-arrow-width;
      margin: $popover-border-radius 0; // make sure the arrow does not touch the popover's rounded corners
  
      &::before {
        right: 0;
        border-width: ($popover-arrow-width / 2) 0 ($popover-arrow-width / 2) $popover-arrow-height;
        border-left-color: $popover-arrow-outer-color;
      }
  
      &::after {
        right: $popover-border-width;
        border-width: ($popover-arrow-width / 2) 0 ($popover-arrow-width / 2) $popover-arrow-height;
        border-left-color: $popover-arrow-color;
      }
    }
  }
  
  .bs-popover-auto {
    &[x-placement^="top"] {
      @extend .bs-popover-top;
    }
    &[x-placement^="right"] {
      @extend .bs-popover-right;
    }
    &[x-placement^="bottom"] {
      @extend .bs-popover-bottom;
    }
    &[x-placement^="left"] {
      @extend .bs-popover-left;
    }
  }
  
  
  // Offset the popover to account for the popover arrow
  .popover-header {
    padding: $popover-header-padding-y $popover-header-padding-x;
    margin-bottom: 0; // Reset the default from Reboot
    @include font-size($font-size-base);
    color: $popover-header-color;
    background-color: $popover-header-bg;
    border-bottom: $popover-border-width solid darken($popover-header-bg, 5%);
    @include border-top-radius($popover-inner-border-radius);
  
    &:empty {
      display: none;
    }
  }
  
  .popover-body {
    padding: $popover-body-padding-y $popover-body-padding-x;
    color: $popover-body-color;
  }
// stylelint-disable declaration-no-important, selector-no-qualifying-type

// Source: https://github.com/h5bp/main.css/blob/master/src/_print.css

// ==========================================================================
// Print styles.
// Inlined to avoid the additional HTTP request:
// https://www.phpied.com/delay-loading-your-print-css/
// ==========================================================================

@if $enable-print-styles {
    @media print {
      *,
      *::before,
      *::after {
        // Bootstrap specific; comment out `color` and `background`
        //color: $black !important; // Black prints faster
        text-shadow: none !important;
        //background: transparent !important;
        box-shadow: none !important;
      }
  
      a {
        &:not(.btn) {
          text-decoration: underline;
        }
      }
  
      // Bootstrap specific; comment the following selector out
      //a[href]::after {
      //  content: " (" attr(href) ")";
      //}
  
      abbr[title]::after {
        content: " (" attr(title) ")";
      }
  
      // Bootstrap specific; comment the following selector out
      //
      // Don't show links that are fragment identifiers,
      // or use the `javascript:` pseudo protocol
      //
  
      //a[href^="#"]::after,
      //a[href^="javascript:"]::after {
      // content: "";
      //}
  
      pre {
        white-space: pre-wrap !important;
      }
      pre,
      blockquote {
        border: $border-width solid $gray-500; // Bootstrap custom code; using `$border-width` instead of 1px
        page-break-inside: avoid;
      }
  
      //
      // Printing Tables:
      // https://web.archive.org/web/20180815150934/http://css-discuss.incutio.com/wiki/Printing_Tables
      //
  
      thead {
        display: table-header-group;
      }
  
      tr,
      img {
        page-break-inside: avoid;
      }
  
      p,
      h2,
      h3 {
        orphans: 3;
        widows: 3;
      }
  
      h2,
      h3 {
        page-break-after: avoid;
      }
  
      // Bootstrap specific changes start
  
      // Specify a size and min-width to make printing closer across browsers.
      // We don't set margin here because it breaks `size` in Chrome. We also
      // don't use `!important` on `size` as it breaks in Chrome.
      @page {
        size: $print-page-size;
      }
      body {
        min-width: $print-body-min-width !important;
      }
      .container {
        min-width: $print-body-min-width !important;
      }
  
      // Bootstrap components
      .navbar {
        display: none;
      }
      .badge {
        border: $border-width solid $black;
      }
  
      .table {
        border-collapse: collapse !important;
  
        td,
        th {
          background-color: $white !important;
        }
      }
  
      .table-bordered {
        th,
        td {
          border: 1px solid $gray-300 !important;
        }
      }
  
      .table-dark {
        color: inherit;
  
        th,
        td,
        thead th,
        tbody + tbody {
          border-color: $table-border-color;
        }
      }
  
      .table .thead-dark th {
        color: inherit;
        border-color: $table-border-color;
      }
  
      // Bootstrap specific changes end
    }
  }
// Disable animation if transitions are disabled
@if $enable-transitions {
    @keyframes progress-bar-stripes {
      from { background-position: $progress-height 0; }
      to { background-position: 0 0; }
    }
  }
  
  .progress {
    display: flex;
    height: $progress-height;
    overflow: hidden; // force rounded corners by cropping it
    @include font-size($progress-font-size);
    background-color: $progress-bg;
    @include border-radius($progress-border-radius);
    @include box-shadow($progress-box-shadow);
  }
  
  .progress-bar {
    display: flex;
    flex-direction: column;
    justify-content: center;
    overflow: hidden;
    color: $progress-bar-color;
    text-align: center;
    white-space: nowrap;
    background-color: $progress-bar-bg;
    @include transition($progress-bar-transition);
  }
  
  .progress-bar-striped {
    @include gradient-striped();
    background-size: $progress-height $progress-height;
  }
  
  @if $enable-transitions {
    .progress-bar-animated {
      animation: progress-bar-stripes $progress-bar-animation-timing;
  
      @if $enable-prefers-reduced-motion-media-query {
        @media (prefers-reduced-motion: reduce) {
          animation: none;
        }
      }
    }
  }
// stylelint-disable at-rule-no-vendor-prefix, declaration-no-important, selector-no-qualifying-type, property-no-vendor-prefix

// Reboot
//
// Normalization of HTML elements, manually forked from Normalize.css to remove
// styles targeting irrelevant browsers while applying new styles.
//
// Normalize is licensed MIT. https://github.com/necolas/normalize.css


// Document
//
// 1. Change from `box-sizing: content-box` so that `width` is not affected by `padding` or `border`.
// 2. Change the default font family in all browsers.
// 3. Correct the line height in all browsers.
// 4. Prevent adjustments of font size after orientation changes in IE on Windows Phone and in iOS.
// 5. Change the default tap highlight to be completely transparent in iOS.

*,
*::before,
*::after {
  box-sizing: border-box; // 1
}

html {
  font-family: sans-serif; // 2
  line-height: 1.15; // 3
  -webkit-text-size-adjust: 100%; // 4
  -webkit-tap-highlight-color: rgba($black, 0); // 5
}

// Shim for "new" HTML5 structural elements to display correctly (IE10, older browsers)
// TODO: remove in v5
// stylelint-disable-next-line selector-list-comma-newline-after
article, aside, figcaption, figure, footer, header, hgroup, main, nav, section {
  display: block;
}

// Body
//
// 1. Remove the margin in all browsers.
// 2. As a best practice, apply a default `background-color`.
// 3. Set an explicit initial text-align value so that we can later use
//    the `inherit` value on things like `<th>` elements.

body {
  margin: 0; // 1
  font-family: $font-family-base;
  @include font-size($font-size-base);
  font-weight: $font-weight-base;
  line-height: $line-height-base;
  color: $body-color;
  text-align: left; // 3
  background-color: $body-bg; // 2
}

// Future-proof rule: in browsers that support :focus-visible, suppress the focus outline
// on elements that programmatically receive focus but wouldn't normally show a visible
// focus outline. In general, this would mean that the outline is only applied if the
// interaction that led to the element receiving programmatic focus was a keyboard interaction,
// or the browser has somehow determined that the user is primarily a keyboard user and/or
// wants focus outlines to always be presented.
//
// See https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible
// and https://developer.paciellogroup.com/blog/2018/03/focus-visible-and-backwards-compatibility/
[tabindex="-1"]:focus:not(:focus-visible) {
  outline: 0 !important;
}


// Content grouping
//
// 1. Add the correct box sizing in Firefox.
// 2. Show the overflow in Edge and IE.

hr {
  box-sizing: content-box; // 1
  height: 0; // 1
  overflow: visible; // 2
}


//
// Typography
//

// Remove top margins from headings
//
// By default, `<h1>`-`<h6>` all receive top and bottom margins. We nuke the top
// margin for easier control within type scales as it avoids margin collapsing.
// stylelint-disable-next-line selector-list-comma-newline-after
h1, h2, h3, h4, h5, h6 {
  margin-top: 0;
  margin-bottom: $headings-margin-bottom;
}

// Reset margins on paragraphs
//
// Similarly, the top margin on `<p>`s get reset. However, we also reset the
// bottom margin to use `rem` units instead of `em`.
p {
  margin-top: 0;
  margin-bottom: $paragraph-margin-bottom;
}

// Abbreviations
//
// 1. Duplicate behavior to the data-* attribute for our tooltip plugin
// 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
// 3. Add explicit cursor to indicate changed behavior.
// 4. Remove the bottom border in Firefox 39-.
// 5. Prevent the text-decoration to be skipped.

abbr[title],
abbr[data-original-title] { // 1
  text-decoration: underline; // 2
  text-decoration: underline dotted; // 2
  cursor: help; // 3
  border-bottom: 0; // 4
  text-decoration-skip-ink: none; // 5
}

address {
  margin-bottom: 1rem;
  font-style: normal;
  line-height: inherit;
}

ol,
ul,
dl {
  margin-top: 0;
  margin-bottom: 1rem;
}

ol ol,
ul ul,
ol ul,
ul ol {
  margin-bottom: 0;
}

dt {
  font-weight: $dt-font-weight;
}

dd {
  margin-bottom: .5rem;
  margin-left: 0; // Undo browser default
}

blockquote {
  margin: 0 0 1rem;
}

b,
strong {
  font-weight: $font-weight-bolder; // Add the correct font weight in Chrome, Edge, and Safari
}

small {
  @include font-size(80%); // Add the correct font size in all browsers
}

//
// Prevent `sub` and `sup` elements from affecting the line height in
// all browsers.
//

sub,
sup {
  position: relative;
  @include font-size(75%);
  line-height: 0;
  vertical-align: baseline;
}

sub { bottom: -.25em; }
sup { top: -.5em; }


//
// Links
//

a {
  color: $link-color;
  text-decoration: $link-decoration;
  background-color: transparent; // Remove the gray background on active links in IE 10.

  @include hover() {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
  }
}

// And undo these styles for placeholder links/named anchors (without href).
// It would be more straightforward to just use a[href] in previous block, but that
// causes specificity issues in many other styles that are too complex to fix.
// See https://github.com/twbs/bootstrap/issues/19402

a:not([href]) {
  color: inherit;
  text-decoration: none;

  @include hover() {
    color: inherit;
    text-decoration: none;
  }
}


//
// Code
//

pre,
code,
kbd,
samp {
  font-family: $font-family-monospace;
  @include font-size(1em); // Correct the odd `em` font sizing in all browsers.
}

pre {
  // Remove browser default top margin
  margin-top: 0;
  // Reset browser default of `1em` to use `rem`s
  margin-bottom: 1rem;
  // Don't allow content to break outside
  overflow: auto;
}


//
// Figures
//

figure {
  // Apply a consistent margin strategy (matches our type styles).
  margin: 0 0 1rem;
}


//
// Images and content
//

img {
  vertical-align: middle;
  border-style: none; // Remove the border on images inside links in IE 10-.
}

svg {
  // Workaround for the SVG overflow bug in IE10/11 is still required.
  // See https://github.com/twbs/bootstrap/issues/26878
  overflow: hidden;
  vertical-align: middle;
}


//
// Tables
//

table {
  border-collapse: collapse; // Prevent double borders
}

caption {
  padding-top: $table-cell-padding;
  padding-bottom: $table-cell-padding;
  color: $table-caption-color;
  text-align: left;
  caption-side: bottom;
}

th {
  // Matches default `<td>` alignment by inheriting from the `<body>`, or the
  // closest parent with a set `text-align`.
  text-align: inherit;
}


//
// Forms
//

label {
  // Allow labels to use `margin` for spacing.
  display: inline-block;
  margin-bottom: $label-margin-bottom;
}

// Remove the default `border-radius` that macOS Chrome adds.
//
// Details at https://github.com/twbs/bootstrap/issues/24093
button {
  // stylelint-disable-next-line property-blacklist
  border-radius: 0;
}

// Work around a Firefox/IE bug where the transparent `button` background
// results in a loss of the default `button` focus styles.
//
// Credit: https://github.com/suitcss/base/
button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color;
}

input,
button,
select,
optgroup,
textarea {
  margin: 0; // Remove the margin in Firefox and Safari
  font-family: inherit;
  @include font-size(inherit);
  line-height: inherit;
}

button,
input {
  overflow: visible; // Show the overflow in Edge
}

button,
select {
  text-transform: none; // Remove the inheritance of text transform in Firefox
}

// Remove the inheritance of word-wrap in Safari.
//
// Details at https://github.com/twbs/bootstrap/issues/24990
select {
  word-wrap: normal;
}


// 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
//    controls in Android 4.
// 2. Correct the inability to style clickable types in iOS and Safari.
button,
[type="button"], // 1
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; // 2
}

// Opinionated: add "hand" cursor to non-disabled button elements.
@if $enable-pointer-cursor-for-buttons {
  button,
  [type="button"],
  [type="reset"],
  [type="submit"] {
    &:not(:disabled) {
      cursor: pointer;
    }
  }
}

// Remove inner border and padding from Firefox, but don't restore the outline like Normalize.
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  padding: 0;
  border-style: none;
}

input[type="radio"],
input[type="checkbox"] {
  box-sizing: border-box; // 1. Add the correct box sizing in IE 10-
  padding: 0; // 2. Remove the padding in IE 10-
}


input[type="date"],
input[type="time"],
input[type="datetime-local"],
input[type="month"] {
  // Remove the default appearance of temporal inputs to avoid a Mobile Safari
  // bug where setting a custom line-height prevents text from being vertically
  // centered within the input.
  // See https://bugs.webkit.org/show_bug.cgi?id=139848
  // and https://github.com/twbs/bootstrap/issues/11266
  -webkit-appearance: listbox;
}

textarea {
  overflow: auto; // Remove the default vertical scrollbar in IE.
  // Textareas should really only resize vertically so they don't break their (horizontal) containers.
  resize: vertical;
}

fieldset {
  // Browsers set a default `min-width: min-content;` on fieldsets,
  // unlike e.g. `<div>`s, which have `min-width: 0;` by default.
  // So we reset that to ensure fieldsets behave more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359
  // and https://html.spec.whatwg.org/multipage/#the-fieldset-and-legend-elements
  min-width: 0;
  // Reset the default outline behavior of fieldsets so they don't affect page layout.
  padding: 0;
  margin: 0;
  border: 0;
}

// 1. Correct the text wrapping in Edge and IE.
// 2. Correct the color inheritance from `fieldset` elements in IE.
legend {
  display: block;
  width: 100%;
  max-width: 100%; // 1
  padding: 0;
  margin-bottom: .5rem;
  @include font-size(1.5rem);
  line-height: inherit;
  color: inherit; // 2
  white-space: normal; // 1
}

progress {
  vertical-align: baseline; // Add the correct vertical alignment in Chrome, Firefox, and Opera.
}

// Correct the cursor style of increment and decrement buttons in Chrome.
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

[type="search"] {
  // This overrides the extra rounded corners on search inputs in iOS so that our
  // `.form-control` class can properly style them. Note that this cannot simply
  // be added to `.form-control` as it's not specific enough. For details, see
  // https://github.com/twbs/bootstrap/issues/11586.
  outline-offset: -2px; // 2. Correct the outline style in Safari.
  -webkit-appearance: none;
}

//
// Remove the inner padding in Chrome and Safari on macOS.
//

[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

//
// 1. Correct the inability to style clickable types in iOS and Safari.
// 2. Change font properties to `inherit` in Safari.
//

::-webkit-file-upload-button {
  font: inherit; // 2
  -webkit-appearance: button; // 1
}

//
// Correct element displays
//

output {
  display: inline-block;
}

summary {
  display: list-item; // Add the correct display in all browsers
  cursor: pointer;
}

template {
  display: none; // Add the correct display in IE
}

// Always hide an element with the `hidden` HTML attribute (from PureCSS).
// Needed for proper display in IE 10-.
[hidden] {
  display: none !important;
}
// Do not forget to update getting-started/theming.md!
:root {
    // Custom variable values only support SassScript inside `#{}`.
    @each $color, $value in $colors {
      --#{$color}: #{$value};
    }
  
    @each $color, $value in $theme-colors {
      --#{$color}: #{$value};
    }
  
    @each $bp, $value in $grid-breakpoints {
      --breakpoint-#{$bp}: #{$value};
    }
  
    // Use `inspect` for lists so that quoted items keep the quotes.
    // See https://github.com/sass/sass/issues/2383#issuecomment-336349172
    --font-family-sans-serif: #{inspect($font-family-sans-serif)};
    --font-family-monospace: #{inspect($font-family-monospace)};
  }
//
// Rotating border
//

@keyframes spinner-border {
    to { transform: rotate(360deg); }
  }
  
  .spinner-border {
    display: inline-block;
    width: $spinner-width;
    height: $spinner-height;
    vertical-align: text-bottom;
    border: $spinner-border-width solid currentColor;
    border-right-color: transparent;
    // stylelint-disable-next-line property-blacklist
    border-radius: 50%;
    animation: spinner-border .75s linear infinite;
  }
  
  .spinner-border-sm {
    width: $spinner-width-sm;
    height: $spinner-height-sm;
    border-width: $spinner-border-width-sm;
  }
  
  //
  // Growing circle
  //
  
  @keyframes spinner-grow {
    0% {
      transform: scale(0);
    }
    50% {
      opacity: 1;
    }
  }
  
  .spinner-grow {
    display: inline-block;
    width: $spinner-width;
    height: $spinner-height;
    vertical-align: text-bottom;
    background-color: currentColor;
    // stylelint-disable-next-line property-blacklist
    border-radius: 50%;
    opacity: 0;
    animation: spinner-grow .75s linear infinite;
  }
  
  .spinner-grow-sm {
    width: $spinner-width-sm;
    height: $spinner-height-sm;
  }
//
// Basic Bootstrap table
//

.table {
    width: 100%;
    margin-bottom: $spacer;
    color: $table-color;
    background-color: $table-bg; // Reset for nesting within parents with `background-color`.
  
    th,
    td {
      padding: $table-cell-padding;
      vertical-align: top;
      border-top: $table-border-width solid $table-border-color;
    }
  
    thead th {
      vertical-align: bottom;
      border-bottom: (2 * $table-border-width) solid $table-border-color;
    }
  
    tbody + tbody {
      border-top: (2 * $table-border-width) solid $table-border-color;
    }
  }
  
  
  //
  // Condensed table w/ half padding
  //
  
  .table-sm {
    th,
    td {
      padding: $table-cell-padding-sm;
    }
  }
  
  
  // Border versions
  //
  // Add or remove borders all around the table and between all the columns.
  
  .table-bordered {
    border: $table-border-width solid $table-border-color;
  
    th,
    td {
      border: $table-border-width solid $table-border-color;
    }
  
    thead {
      th,
      td {
        border-bottom-width: 2 * $table-border-width;
      }
    }
  }
  
  .table-borderless {
    th,
    td,
    thead th,
    tbody + tbody {
      border: 0;
    }
  }
  
  // Zebra-striping
  //
  // Default zebra-stripe styles (alternating gray and transparent backgrounds)
  
  .table-striped {
    tbody tr:nth-of-type(#{$table-striped-order}) {
      background-color: $table-accent-bg;
    }
  }
  
  
  // Hover effect
  //
  // Placed here since it has to come after the potential zebra striping
  
  .table-hover {
    tbody tr {
      @include hover() {
        color: $table-hover-color;
        background-color: $table-hover-bg;
      }
    }
  }
  
  
  // Table backgrounds
  //
  // Exact selectors below required to override `.table-striped` and prevent
  // inheritance to nested tables.
  
  @each $color, $value in $theme-colors {
    @include table-row-variant($color, theme-color-level($color, $table-bg-level), theme-color-level($color, $table-border-level));
  }
  
  @include table-row-variant(active, $table-active-bg);
  
  
  // Dark styles
  //
  // Same table markup, but inverted color scheme: dark background and light text.
  
  // stylelint-disable-next-line no-duplicate-selectors
  .table {
    .thead-dark {
      th {
        color: $table-dark-color;
        background-color: $table-dark-bg;
        border-color: $table-dark-border-color;
      }
    }
  
    .thead-light {
      th {
        color: $table-head-color;
        background-color: $table-head-bg;
        border-color: $table-border-color;
      }
    }
  }
  
  .table-dark {
    color: $table-dark-color;
    background-color: $table-dark-bg;
  
    th,
    td,
    thead th {
      border-color: $table-dark-border-color;
    }
  
    &.table-bordered {
      border: 0;
    }
  
    &.table-striped {
      tbody tr:nth-of-type(#{$table-striped-order}) {
        background-color: $table-dark-accent-bg;
      }
    }
  
    &.table-hover {
      tbody tr {
        @include hover() {
          color: $table-dark-hover-color;
          background-color: $table-dark-hover-bg;
        }
      }
    }
  }
  
  
  // Responsive tables
  //
  // Generate series of `.table-responsive-*` classes for configuring the screen
  // size of where your table will overflow.
  
  .table-responsive {
    @each $breakpoint in map-keys($grid-breakpoints) {
      $next: breakpoint-next($breakpoint, $grid-breakpoints);
      $infix: breakpoint-infix($next, $grid-breakpoints);
  
      &#{$infix} {
        @include media-breakpoint-down($breakpoint) {
          display: block;
          width: 100%;
          overflow-x: auto;
          -webkit-overflow-scrolling: touch;
  
          // Prevent double border on horizontal scroll due to use of `display: block;`
          > .table-bordered {
            border: 0;
          }
        }
      }
    }
  }
  .toast {
    max-width: $toast-max-width;
    overflow: hidden; // cheap rounded corners on nested items
    @include font-size($toast-font-size);
    color: $toast-color;
    background-color: $toast-background-color;
    background-clip: padding-box;
    border: $toast-border-width solid $toast-border-color;
    box-shadow: $toast-box-shadow;
    backdrop-filter: blur(10px);
    opacity: 0;
    @include border-radius($toast-border-radius);
  
    &:not(:last-child) {
      margin-bottom: $toast-padding-x;
    }
  
    &.showing {
      opacity: 1;
    }
  
    &.show {
      display: block;
      opacity: 1;
    }
  
    &.hide {
      display: none;
    }
  }
  
  .toast-header {
    display: flex;
    align-items: center;
    padding: $toast-padding-y $toast-padding-x;
    color: $toast-header-color;
    background-color: $toast-header-background-color;
    background-clip: padding-box;
    border-bottom: $toast-border-width solid $toast-header-border-color;
  }
  
  .toast-body {
    padding: $toast-padding-x; // apply to both vertical and horizontal
  }
// Base class
.tooltip {
    position: absolute;
    z-index: $zindex-tooltip;
    display: block;
    margin: $tooltip-margin;
    // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.
    // So reset our font and text properties to avoid inheriting weird values.
    @include reset-text();
    @include font-size($tooltip-font-size);
    // Allow breaking very long words so they don't overflow the tooltip's bounds
    word-wrap: break-word;
    opacity: 0;
  
    &.show { opacity: $tooltip-opacity; }
  
    .arrow {
      position: absolute;
      display: block;
      width: $tooltip-arrow-width;
      height: $tooltip-arrow-height;
  
      &::before {
        position: absolute;
        content: "";
        border-color: transparent;
        border-style: solid;
      }
    }
  }
  
  .bs-tooltip-top {
    padding: $tooltip-arrow-height 0;
  
    .arrow {
      bottom: 0;
  
      &::before {
        top: 0;
        border-width: $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
        border-top-color: $tooltip-arrow-color;
      }
    }
  }
  
  .bs-tooltip-right {
    padding: 0 $tooltip-arrow-height;
  
    .arrow {
      left: 0;
      width: $tooltip-arrow-height;
      height: $tooltip-arrow-width;
  
      &::before {
        right: 0;
        border-width: ($tooltip-arrow-width / 2) $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
        border-right-color: $tooltip-arrow-color;
      }
    }
  }
  
  .bs-tooltip-bottom {
    padding: $tooltip-arrow-height 0;
  
    .arrow {
      top: 0;
  
      &::before {
        bottom: 0;
        border-width: 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
        border-bottom-color: $tooltip-arrow-color;
      }
    }
  }
  
  .bs-tooltip-left {
    padding: 0 $tooltip-arrow-height;
  
    .arrow {
      right: 0;
      width: $tooltip-arrow-height;
      height: $tooltip-arrow-width;
  
      &::before {
        left: 0;
        border-width: ($tooltip-arrow-width / 2) 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
        border-left-color: $tooltip-arrow-color;
      }
    }
  }
  
  .bs-tooltip-auto {
    &[x-placement^="top"] {
      @extend .bs-tooltip-top;
    }
    &[x-placement^="right"] {
      @extend .bs-tooltip-right;
    }
    &[x-placement^="bottom"] {
      @extend .bs-tooltip-bottom;
    }
    &[x-placement^="left"] {
      @extend .bs-tooltip-left;
    }
  }
  
  // Wrapper for the tooltip content
  .tooltip-inner {
    max-width: $tooltip-max-width;
    padding: $tooltip-padding-y $tooltip-padding-x;
    color: $tooltip-color;
    text-align: center;
    background-color: $tooltip-bg;
    @include border-radius($tooltip-border-radius);
  }
  .fade {
    @include transition($transition-fade);
  
    &:not(.show) {
      opacity: 0;
    }
  }
  
  .collapse {
    &:not(.show) {
      display: none;
    }
  }
  
  .collapsing {
    position: relative;
    height: 0;
    overflow: hidden;
    @include transition($transition-collapse);
  }
// stylelint-disable declaration-no-important, selector-list-comma-newline-after

//
// Headings
//

h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6 {
  margin-bottom: $headings-margin-bottom;
  font-family: $headings-font-family;
  font-weight: $headings-font-weight;
  line-height: $headings-line-height;
  color: $headings-color;
}

h1, .h1 { @include font-size($h1-font-size); }
h2, .h2 { @include font-size($h2-font-size); }
h3, .h3 { @include font-size($h3-font-size); }
h4, .h4 { @include font-size($h4-font-size); }
h5, .h5 { @include font-size($h5-font-size); }
h6, .h6 { @include font-size($h6-font-size); }

.lead {
  @include font-size($lead-font-size);
  font-weight: $lead-font-weight;
}

// Type display classes
.display-1 {
  @include font-size($display1-size);
  font-weight: $display1-weight;
  line-height: $display-line-height;
}
.display-2 {
  @include font-size($display2-size);
  font-weight: $display2-weight;
  line-height: $display-line-height;
}
.display-3 {
  @include font-size($display3-size);
  font-weight: $display3-weight;
  line-height: $display-line-height;
}
.display-4 {
  @include font-size($display4-size);
  font-weight: $display4-weight;
  line-height: $display-line-height;
}


//
// Horizontal rules
//

hr {
  margin-top: $hr-margin-y;
  margin-bottom: $hr-margin-y;
  border: 0;
  border-top: $hr-border-width solid $hr-border-color;
}


//
// Emphasis
//

small,
.small {
  @include font-size($small-font-size);
  font-weight: $font-weight-normal;
}

mark,
.mark {
  padding: $mark-padding;
  background-color: $mark-bg;
}


//
// Lists
//

.list-unstyled {
  @include list-unstyled();
}

// Inline turns list items into inline-block
.list-inline {
  @include list-unstyled();
}
.list-inline-item {
  display: inline-block;

  &:not(:last-child) {
    margin-right: $list-inline-padding;
  }
}


//
// Misc
//

// Builds on `abbr`
.initialism {
  @include font-size(90%);
  text-transform: uppercase;
}

// Blockquotes
.blockquote {
  margin-bottom: $spacer;
  @include font-size($blockquote-font-size);
}

.blockquote-footer {
  display: block;
  @include font-size($blockquote-small-font-size);
  color: $blockquote-small-color;

  &::before {
    content: "\2014\00A0"; // em dash, nbsp
  }
}
/*!
 * Bootstrap v4.4.1 (https://getbootstrap.com/)
 * Copyright 2011-2019 The Bootstrap Authors
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

 @import "functions";
 @import "variables";
 @import "mixins";
 @import "root";
 @import "reboot";
 @import "type";
 @import "images";
 @import "code";
 @import "grid";
 @import "tables";
 @import "forms";
 @import "buttons";
 @import "transitions";
 @import "dropdown";
 @import "button-group";
 @import "input-group";
 @import "custom-forms";
 @import "nav";
 @import "navbar";
 @import "card";
 @import "breadcrumb";
 @import "pagination";
 @import "badge";
 @import "jumbotron";
 @import "alert";
 @import "progress";
 @import "media";
 @import "list-group";
 @import "close";
 @import "toasts";
 @import "modal";
 @import "tooltip";
 @import "popover";
 @import "carousel";
 @import "spinners";
 @import "utilities";
 @import "print";
// stylelint-disable declaration-no-important

.align-baseline    { vertical-align: baseline !important; } // Browser default
.align-top         { vertical-align: top !important; }
.align-middle      { vertical-align: middle !important; }
.align-bottom      { vertical-align: bottom !important; }
.align-text-bottom { vertical-align: text-bottom !important; }
.align-text-top    { vertical-align: text-top !important; }
// stylelint-disable declaration-no-important

@each $color, $value in $theme-colors {
    @include bg-variant(".bg-#{$color}", $value, true);
  }
  
  @if $enable-gradients {
    @each $color, $value in $theme-colors {
      @include bg-gradient-variant(".bg-gradient-#{$color}", $value);
    }
  }
  
  .bg-white {
    background-color: $white !important;
  }
  
  .bg-transparent {
    background-color: transparent !important;
  }
// stylelint-disable property-blacklist, declaration-no-important

//
// Border
//

.border         { border: $border-width solid $border-color !important; }
.border-top     { border-top: $border-width solid $border-color !important; }
.border-right   { border-right: $border-width solid $border-color !important; }
.border-bottom  { border-bottom: $border-width solid $border-color !important; }
.border-left    { border-left: $border-width solid $border-color !important; }

.border-0        { border: 0 !important; }
.border-top-0    { border-top: 0 !important; }
.border-right-0  { border-right: 0 !important; }
.border-bottom-0 { border-bottom: 0 !important; }
.border-left-0   { border-left: 0 !important; }

@each $color, $value in $theme-colors {
  .border-#{$color} {
    border-color: $value !important;
  }
}

.border-white {
  border-color: $white !important;
}

//
// Border-radius
//

.rounded-sm {
  border-radius: $border-radius-sm !important;
}

.rounded {
  border-radius: $border-radius !important;
}

.rounded-top {
  border-top-left-radius: $border-radius !important;
  border-top-right-radius: $border-radius !important;
}

.rounded-right {
  border-top-right-radius: $border-radius !important;
  border-bottom-right-radius: $border-radius !important;
}

.rounded-bottom {
  border-bottom-right-radius: $border-radius !important;
  border-bottom-left-radius: $border-radius !important;
}

.rounded-left {
  border-top-left-radius: $border-radius !important;
  border-bottom-left-radius: $border-radius !important;
}

.rounded-lg {
  border-radius: $border-radius-lg !important;
}

.rounded-circle {
  border-radius: 50% !important;
}

.rounded-pill {
  border-radius: $rounded-pill !important;
}

.rounded-0 {
  border-radius: 0 !important;
}
// stylelint-disable declaration-no-important

//
// Utilities for common `display` values
//

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  
      @each $value in $displays {
        .d#{$infix}-#{$value} { display: $value !important; }
      }
    }
  }
  
  
  //
  // Utilities for toggling `display` in print
  //
  
  @media print {
    @each $value in $displays {
      .d-print-#{$value} { display: $value !important; }
    }
  }
// Credit: Nicolas Gallagher and SUIT CSS.

.embed-responsive {
    position: relative;
    display: block;
    width: 100%;
    padding: 0;
    overflow: hidden;
  
    &::before {
      display: block;
      content: "";
    }
  
    .embed-responsive-item,
    iframe,
    embed,
    object,
    video {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: 0;
    }
  }
  
  @each $embed-responsive-aspect-ratio in $embed-responsive-aspect-ratios {
    $embed-responsive-aspect-ratio-x: nth($embed-responsive-aspect-ratio, 1);
    $embed-responsive-aspect-ratio-y: nth($embed-responsive-aspect-ratio, 2);
  
    .embed-responsive-#{$embed-responsive-aspect-ratio-x}by#{$embed-responsive-aspect-ratio-y} {
      &::before {
        padding-top: percentage($embed-responsive-aspect-ratio-y / $embed-responsive-aspect-ratio-x);
      }
    }
  }
// stylelint-disable declaration-no-important

// Flex variation
//
// Custom styles for additional flex alignment options.

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  
      .flex#{$infix}-row            { flex-direction: row !important; }
      .flex#{$infix}-column         { flex-direction: column !important; }
      .flex#{$infix}-row-reverse    { flex-direction: row-reverse !important; }
      .flex#{$infix}-column-reverse { flex-direction: column-reverse !important; }
  
      .flex#{$infix}-wrap         { flex-wrap: wrap !important; }
      .flex#{$infix}-nowrap       { flex-wrap: nowrap !important; }
      .flex#{$infix}-wrap-reverse { flex-wrap: wrap-reverse !important; }
      .flex#{$infix}-fill         { flex: 1 1 auto !important; }
      .flex#{$infix}-grow-0       { flex-grow: 0 !important; }
      .flex#{$infix}-grow-1       { flex-grow: 1 !important; }
      .flex#{$infix}-shrink-0     { flex-shrink: 0 !important; }
      .flex#{$infix}-shrink-1     { flex-shrink: 1 !important; }
  
      .justify-content#{$infix}-start   { justify-content: flex-start !important; }
      .justify-content#{$infix}-end     { justify-content: flex-end !important; }
      .justify-content#{$infix}-center  { justify-content: center !important; }
      .justify-content#{$infix}-between { justify-content: space-between !important; }
      .justify-content#{$infix}-around  { justify-content: space-around !important; }
  
      .align-items#{$infix}-start    { align-items: flex-start !important; }
      .align-items#{$infix}-end      { align-items: flex-end !important; }
      .align-items#{$infix}-center   { align-items: center !important; }
      .align-items#{$infix}-baseline { align-items: baseline !important; }
      .align-items#{$infix}-stretch  { align-items: stretch !important; }
  
      .align-content#{$infix}-start   { align-content: flex-start !important; }
      .align-content#{$infix}-end     { align-content: flex-end !important; }
      .align-content#{$infix}-center  { align-content: center !important; }
      .align-content#{$infix}-between { align-content: space-between !important; }
      .align-content#{$infix}-around  { align-content: space-around !important; }
      .align-content#{$infix}-stretch { align-content: stretch !important; }
  
      .align-self#{$infix}-auto     { align-self: auto !important; }
      .align-self#{$infix}-start    { align-self: flex-start !important; }
      .align-self#{$infix}-end      { align-self: flex-end !important; }
      .align-self#{$infix}-center   { align-self: center !important; }
      .align-self#{$infix}-baseline { align-self: baseline !important; }
      .align-self#{$infix}-stretch  { align-self: stretch !important; }
    }
  }
// stylelint-disable declaration-no-important

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  
      .float#{$infix}-left  { float: left !important; }
      .float#{$infix}-right { float: right !important; }
      .float#{$infix}-none  { float: none !important; }
    }
  }
// stylelint-disable declaration-no-important

@each $value in $overflows {
    .overflow-#{$value} { overflow: $value !important; }
  }
// stylelint-disable declaration-no-important

// Common values
@each $position in $positions {
    .position-#{$position} { position: $position !important; }
  }
  
  // Shorthand
  
  .fixed-top {
    position: fixed;
    top: 0;
    right: 0;
    left: 0;
    z-index: $zindex-fixed;
  }
  
  .fixed-bottom {
    position: fixed;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: $zindex-fixed;
  }
  
  .sticky-top {
    @supports (position: sticky) {
      position: sticky;
      top: 0;
      z-index: $zindex-sticky;
    }
  }
//
// Screenreaders
//

.sr-only {
    @include sr-only();
  }
  
  .sr-only-focusable {
    @include sr-only-focusable();
  }
// stylelint-disable declaration-no-important

.shadow-sm { box-shadow: $box-shadow-sm !important; }
.shadow { box-shadow: $box-shadow !important; }
.shadow-lg { box-shadow: $box-shadow-lg !important; }
.shadow-none { box-shadow: none !important; }
// stylelint-disable declaration-no-important

// Width and height

@each $prop, $abbrev in (width: w, height: h) {
    @each $size, $length in $sizes {
      .#{$abbrev}-#{$size} { #{$prop}: $length !important; }
    }
  }
  
  .mw-100 { max-width: 100% !important; }
  .mh-100 { max-height: 100% !important; }
  
  // Viewport additional helpers
  
  .min-vw-100 { min-width: 100vw !important; }
  .min-vh-100 { min-height: 100vh !important; }
  
  .vw-100 { width: 100vw !important; }
  .vh-100 { height: 100vh !important; }
// stylelint-disable declaration-no-important

// Margin and Padding

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  
      @each $prop, $abbrev in (margin: m, padding: p) {
        @each $size, $length in $spacers {
          .#{$abbrev}#{$infix}-#{$size} { #{$prop}: $length !important; }
          .#{$abbrev}t#{$infix}-#{$size},
          .#{$abbrev}y#{$infix}-#{$size} {
            #{$prop}-top: $length !important;
          }
          .#{$abbrev}r#{$infix}-#{$size},
          .#{$abbrev}x#{$infix}-#{$size} {
            #{$prop}-right: $length !important;
          }
          .#{$abbrev}b#{$infix}-#{$size},
          .#{$abbrev}y#{$infix}-#{$size} {
            #{$prop}-bottom: $length !important;
          }
          .#{$abbrev}l#{$infix}-#{$size},
          .#{$abbrev}x#{$infix}-#{$size} {
            #{$prop}-left: $length !important;
          }
        }
      }
  
      // Negative margins (e.g., where `.mb-n1` is negative version of `.mb-1`)
      @each $size, $length in $spacers {
        @if $size != 0 {
          .m#{$infix}-n#{$size} { margin: -$length !important; }
          .mt#{$infix}-n#{$size},
          .my#{$infix}-n#{$size} {
            margin-top: -$length !important;
          }
          .mr#{$infix}-n#{$size},
          .mx#{$infix}-n#{$size} {
            margin-right: -$length !important;
          }
          .mb#{$infix}-n#{$size},
          .my#{$infix}-n#{$size} {
            margin-bottom: -$length !important;
          }
          .ml#{$infix}-n#{$size},
          .mx#{$infix}-n#{$size} {
            margin-left: -$length !important;
          }
        }
      }
  
      // Some special margin utils
      .m#{$infix}-auto { margin: auto !important; }
      .mt#{$infix}-auto,
      .my#{$infix}-auto {
        margin-top: auto !important;
      }
      .mr#{$infix}-auto,
      .mx#{$infix}-auto {
        margin-right: auto !important;
      }
      .mb#{$infix}-auto,
      .my#{$infix}-auto {
        margin-bottom: auto !important;
      }
      .ml#{$infix}-auto,
      .mx#{$infix}-auto {
        margin-left: auto !important;
      }
    }
  }
//
// Stretched link
//

.stretched-link {
    &::after {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 1;
      // Just in case `pointer-events: none` is set on a parent
      pointer-events: auto;
      content: "";
      // IE10 bugfix, see https://stackoverflow.com/questions/16947967/ie10-hover-pseudo-class-doesnt-work-without-background-color
      background-color: rgba(0, 0, 0, 0);
    }
  }
// stylelint-disable declaration-no-important

//
// Text
//

.text-monospace { font-family: $font-family-monospace !important; }

// Alignment

.text-justify  { text-align: justify !important; }
.text-wrap     { white-space: normal !important; }
.text-nowrap   { white-space: nowrap !important; }
.text-truncate { @include text-truncate(); }

// Responsive alignment

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .text#{$infix}-left   { text-align: left !important; }
    .text#{$infix}-right  { text-align: right !important; }
    .text#{$infix}-center { text-align: center !important; }
  }
}

// Transformation

.text-lowercase  { text-transform: lowercase !important; }
.text-uppercase  { text-transform: uppercase !important; }
.text-capitalize { text-transform: capitalize !important; }

// Weight and italics

.font-weight-light   { font-weight: $font-weight-light !important; }
.font-weight-lighter { font-weight: $font-weight-lighter !important; }
.font-weight-normal  { font-weight: $font-weight-normal !important; }
.font-weight-bold    { font-weight: $font-weight-bold !important; }
.font-weight-bolder  { font-weight: $font-weight-bolder !important; }
.font-italic         { font-style: italic !important; }

// Contextual colors

.text-white { color: $white !important; }

@each $color, $value in $theme-colors {
  @include text-emphasis-variant(".text-#{$color}", $value, true);
}

.text-body { color: $body-color !important; }
.text-muted { color: $text-muted !important; }

.text-black-50 { color: rgba($black, .5) !important; }
.text-white-50 { color: rgba($white, .5) !important; }

// Misc

.text-hide {
  @include text-hide($ignore-warning: true);
}

.text-decoration-none { text-decoration: none !important; }

.text-break {
  word-break: break-word !important; // IE & < Edge 18
  overflow-wrap: break-word !important;
}

// Reset

.text-reset { color: inherit !important; }
// stylelint-disable declaration-no-important

//
// Visibility utilities
//

.visible {
    visibility: visible !important;
  }
  
  .invisible {
    visibility: hidden !important;
  }
                                                                               